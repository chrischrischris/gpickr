!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define("react-gpickr",["React"],e):"object"==typeof exports?exports["react-gpickr"]=e(require("react")):t["react-gpickr"]=e(t.React)}(window,(function(t){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="/dist/",o(o.s=3)}([function(t,e,o){t.exports=o(4)()},function(e,o){e.exports=t},function(t,e,o){
/*! Pickr 1.5.1 MIT | https://github.com/Simonwep/pickr */
window,t.exports=function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=1)}([function(t){t.exports=JSON.parse('{"a":"1.5.1"}')},function(t,e,o){"use strict";o.r(e);var n={};function i(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,n)}return o}function r(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?i(Object(o),!0).forEach((function(e){s(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function s(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function c(t,e,o,n,i={}){e instanceof HTMLCollection||e instanceof NodeList?e=Array.from(e):Array.isArray(e)||(e=[e]),Array.isArray(o)||(o=[o]);for(const s of e)for(const e of o)s[t](e,n,r({capture:!1},i));return Array.prototype.slice.call(arguments,1)}o.r(n),o.d(n,"on",(function(){return a})),o.d(n,"off",(function(){return l})),o.d(n,"createElementFromString",(function(){return p})),o.d(n,"removeAttribute",(function(){return u})),o.d(n,"createFromTemplate",(function(){return h})),o.d(n,"eventPath",(function(){return d})),o.d(n,"resolveElement",(function(){return f})),o.d(n,"adjustableInputNumbers",(function(){return m}));const a=c.bind(null,"addEventListener"),l=c.bind(null,"removeEventListener");function p(t){const e=document.createElement("div");return e.innerHTML=t.trim(),e.firstElementChild}function u(t,e){const o=t.getAttribute(e);return t.removeAttribute(e),o}function h(t){return function t(e,o={}){const n=u(e,":obj"),i=u(e,":ref"),r=n?o[n]={}:o;i&&(o[i]=e);for(const o of Array.from(e.children)){const e=u(o,":arr"),n=t(o,e?{}:r);e&&(r[e]||(r[e]=[])).push(Object.keys(n).length?n:o)}return o}(p(t))}function d(t){let e=t.path||t.composedPath&&t.composedPath();if(e)return e;let o=t.target.parentElement;for(e=[t.target,o];o=o.parentElement;)e.push(o);return e.push(document,window),e}function f(t){return t instanceof Element?t:"string"==typeof t?t.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document):null}function m(t,e=(t=>t)){function o(o){const n=[.001,.01,.1][Number(o.shiftKey||2*o.ctrlKey)]*(o.deltaY<0?1:-1);let i=0,r=t.selectionStart;t.value=t.value.replace(/[\d.]+/g,(t,o)=>o<=r&&o+t.length>=r?(r=o,e(Number(t),n,i)):(i++,t)),t.focus(),t.setSelectionRange(r,r),o.preventDefault(),t.dispatchEvent(new Event("input"))}a(t,"focus",()=>a(window,"wheel",o,{passive:!1})),a(t,"blur",()=>l(window,"wheel",o))}var g=o(0);const{min:b,max:v,floor:_,round:y}=Math;function w(t,e,o){e/=100,o/=100;const n=_(t=t/360*6),i=t-n,r=o*(1-e),s=o*(1-i*e),c=o*(1-(1-i)*e),a=n%6;return[255*[o,s,r,r,c,o][a],255*[c,o,o,s,r,r][a],255*[r,r,c,o,o,s][a]]}function k(t,e,o){const n=(2-(e/=100))*(o/=100)/2;return 0!==n&&(e=1===n?0:n<.5?e*o/(2*n):e*o/(2-2*n)),[t,100*e,100*n]}function S(t,e,o){const n=b(t/=255,e/=255,o/=255),i=v(t,e,o),r=i-n;let s,c;if(0===r)s=c=0;else{c=r/i;const n=((i-t)/6+r/2)/r,a=((i-e)/6+r/2)/r,l=((i-o)/6+r/2)/r;t===i?s=l-a:e===i?s=1/3+n-l:o===i&&(s=2/3+a-n),s<0?s+=1:s>1&&(s-=1)}return[360*s,100*c,100*i]}function O(t,e,o,n){return e/=100,o/=100,[...S(255*(1-b(1,(t/=100)*(1-(n/=100))+n)),255*(1-b(1,e*(1-n)+n)),255*(1-b(1,o*(1-n)+n)))]}function C(t,e,o){return e/=100,[t,2*(e*=(o/=100)<.5?o:1-o)/(o+e)*100,100*(o+e)]}function A(t){return S(...t.match(/.{2}/g).map(t=>parseInt(t,16)))}function j(t=0,e=0,o=0,n=1){const i=(t,e)=>(o=-1)=>e(~o?t.map(t=>Number(t.toFixed(o))):t),r={h:t,s:e,v:o,a:n,toHSVA(){const t=[r.h,r.s,r.v,r.a];return t.toString=i(t,t=>"hsva(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(r.a,")")),t},toHSLA(){const t=[...k(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>"hsla(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(r.a,")")),t},toRGBA(){const t=[...w(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>"rgba(".concat(t[0],", ").concat(t[1],", ").concat(t[2],", ").concat(r.a,")")),t},toCMYK(){const t=function(t,e,o){const n=w(t,e,o),i=n[0]/255,r=n[1]/255,s=n[2]/255,c=b(1-i,1-r,1-s);return[100*(1===c?0:(1-i-c)/(1-c)),100*(1===c?0:(1-r-c)/(1-c)),100*(1===c?0:(1-s-c)/(1-c)),100*c]}(r.h,r.s,r.v);return t.toString=i(t,t=>"cmyk(".concat(t[0],"%, ").concat(t[1],"%, ").concat(t[2],"%, ").concat(t[3],"%)")),t},toHEXA(){const t=function(t,e,o){return w(t,e,o).map(t=>y(t).toString(16).padStart(2,"0"))}(r.h,r.s,r.v),e=r.a>=1?"":Number((255*r.a).toFixed(0)).toString(16).toUpperCase().padStart(2,"0");return e&&t.push(e),t.toString=()=>"#".concat(t.join("").toUpperCase()),t},clone:()=>j(r.h,r.s,r.v,r.a)};return r}const x=t=>Math.max(Math.min(t,1),0);function E(t){const e={options:Object.assign({lock:null,onchange:()=>0,onstop:()=>0},t),_keyboard(t){const{options:o}=e,{type:n,key:i}=t;if(document.activeElement===o.wrapper){const{lock:o}=e.options,r="ArrowUp"===i,s="ArrowRight"===i,c="ArrowDown"===i,a="ArrowLeft"===i;if("keydown"===n&&(r||s||c||a)){let n=0,i=0;"v"===o?n=r||s?1:-1:"h"===o?n=r||s?-1:1:(i=r?-1:c?1:0,n=a?-1:s?1:0),e.update(x(e.cache.x+.01*n),x(e.cache.y+.01*i)),t.preventDefault()}else i.startsWith("Arrow")&&(e.options.onstop(),t.preventDefault())}},_tapstart(t){a(document,["mouseup","touchend","touchcancel"],e._tapstop),a(document,["mousemove","touchmove"],e._tapmove),t.preventDefault(),e._tapmove(t)},_tapmove(t){const{options:o,cache:n}=e,{lock:i,element:r,wrapper:s}=o,c=s.getBoundingClientRect();let a=0,l=0;if(t){const e=t&&t.touches&&t.touches[0];a=t?(e||t).clientX:0,l=t?(e||t).clientY:0,a<c.left?a=c.left:a>c.left+c.width&&(a=c.left+c.width),l<c.top?l=c.top:l>c.top+c.height&&(l=c.top+c.height),a-=c.left,l-=c.top}else n&&(a=n.x*c.width,l=n.y*c.height);"h"!==i&&(r.style.left="calc(".concat(a/c.width*100,"% - ").concat(r.offsetWidth/2,"px)")),"v"!==i&&(r.style.top="calc(".concat(l/c.height*100,"% - ").concat(r.offsetHeight/2,"px)")),e.cache={x:a/c.width,y:l/c.height};const p=x(a/c.width),u=x(l/c.height);switch(i){case"v":return o.onchange(p);case"h":return o.onchange(u);default:return o.onchange(p,u)}},_tapstop(){e.options.onstop(),l(document,["mouseup","touchend","touchcancel"],e._tapstop),l(document,["mousemove","touchmove"],e._tapmove)},trigger(){e._tapmove()},update(t=0,o=0){const{left:n,top:i,width:r,height:s}=e.options.wrapper.getBoundingClientRect();"h"===e.options.lock&&(o=t),e._tapmove({clientX:n+r*t,clientY:i+s*o})},destroy(){const{options:t,_tapstart:o,_keyboard:n}=e;l(document,["keydown","keyup"],n),l([t.wrapper,t.element],"mousedown",o),l([t.wrapper,t.element],"touchstart",o,{passive:!1})}},{options:o,_tapstart:n,_keyboard:i}=e;return a([o.wrapper,o.element],"mousedown",n),a([o.wrapper,o.element],"touchstart",n,{passive:!1}),a(document,["keydown","keyup"],i),e}function P(t={}){t=Object.assign({onchange:()=>0,className:"",elements:[]},t);const e=a(t.elements,"click",e=>{t.elements.forEach(o=>o.classList[e.target===o?"add":"remove"](t.className)),t.onchange(e)});return{destroy:()=>l(...e)}}function L({el:t,reference:e,padding:o=8}){const n={start:"sme",middle:"mse",end:"ems"},i={top:"tbrl",right:"rltb",bottom:"btrl",left:"lrbt"},r=((t={})=>(e,o=t[e])=>{if(o)return o;const[n,i="middle"]=e.split("-"),r="top"===n||"bottom"===n;return t[e]={position:n,variant:i,isVertical:r}})();return{update(s,c=!1){const{position:a,variant:l,isVertical:p}=r(s),u=e.getBoundingClientRect(),h=t.getBoundingClientRect(),d=t=>t?{t:u.top-h.height-o,b:u.bottom+o}:{r:u.right+o,l:u.left-h.width-o},f=t=>t?{s:u.left+u.width-h.width,m:-h.width/2+(u.left+u.width/2),e:u.left}:{s:u.bottom-h.height,m:u.bottom-u.height/2-h.height/2,e:u.bottom-u.height},m={},g=(t,e,o)=>{const n="top"===o,i=n?h.height:h.width,r=window[n?"innerHeight":"innerWidth"];for(const n of t){const t=e[n],s=m[o]="".concat(t,"px");if(t>0&&t+i<r)return s}return null};for(const e of[p,!p]){const o=e?"top":"left",r=e?"left":"top",s=g(i[a],d(e),o),c=g(n[l],f(e),r);if(s&&c)return t.style[r]=c,void(t.style[o]=s)}c?(t.style.top="".concat((window.innerHeight-h.height)/2,"px"),t.style.left="".concat((window.innerWidth-h.width)/2,"px")):(t.style.left=m.left,t.style.top=m.top)}}}function R(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class T{constructor(t){R(this,"_initializingActive",!0),R(this,"_recalc",!0),R(this,"_nanopop",null),R(this,"_root",null),R(this,"_color",j()),R(this,"_lastColor",j()),R(this,"_swatchColors",[]),R(this,"_eventListener",{init:[],save:[],hide:[],show:[],clear:[],change:[],changestop:[],cancel:[],swatchselect:[]}),this.options=t=Object.assign({appClass:null,theme:"classic",useAsButton:!1,padding:8,disabled:!1,comparison:!0,closeOnScroll:!1,outputPrecision:0,lockOpacity:!1,autoReposition:!0,container:"body",components:{interaction:{}},strings:{},swatches:null,inline:!1,sliders:null,default:"#42445a",defaultRepresentation:null,position:"bottom-middle",adjustableNumbers:!0,showAlways:!1,closeWithKey:"Escape"},t);const{swatches:e,components:o,theme:n,sliders:i,lockOpacity:r,padding:s}=t;["nano","monolith"].includes(n)&&!i&&(t.sliders="h"),o.interaction||(o.interaction={});const{preview:c,opacity:a,hue:l,palette:p}=o;o.opacity=!r&&a,o.palette=p||c||a||l,this._preBuild(),this._buildComponents(),this._bindEvents(),this._finalBuild(),e&&e.length&&e.forEach(t=>this.addSwatch(t));const{button:u,app:h}=this._root;this._nanopop=L({reference:u,padding:s,el:h}),u.setAttribute("role","button"),u.setAttribute("aria-label","toggle color picker dialog");const d=this;requestAnimationFrame((function e(){if(!h.offsetWidth&&h.parentElement!==t.container)return requestAnimationFrame(e);d.setColor(t.default),d._rePositioningPicker(),t.defaultRepresentation&&(d._representation=t.defaultRepresentation,d.setColorRepresentation(d._representation)),t.showAlways&&d.show(),d._initializingActive=!1,d._emit("init")}))}_preBuild(){const t=this.options;for(const e of["el","container"])t[e]=f(t[e]);this._root=(({components:t,strings:e,useAsButton:o,inline:n,appClass:i,theme:r,lockOpacity:s})=>{const c=t=>t?"":'style="display:none" hidden',a=h('\n      <div :ref="root" class="pickr">\n\n        '.concat(o?"":'<button type="button" :ref="button" class="pcr-button"></button>','\n\n        <div :ref="app" class="pcr-app ').concat(i||"",'" data-theme="').concat(r,'" ').concat(n?'style="position: unset"':"",' aria-label="color picker dialog" role="form">\n          <div class="pcr-selection" ').concat(c(t.palette),'>\n            <div :obj="preview" class="pcr-color-preview" ').concat(c(t.preview),'>\n              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="use previous color"></button>\n              <div :ref="currentColor" class="pcr-current-color"></div>\n            </div>\n\n            <div :obj="palette" class="pcr-color-palette">\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="color selection area" role="listbox"></div>\n            </div>\n\n            <div :obj="hue" class="pcr-color-chooser" ').concat(c(t.hue),'>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="hue selection slider" role="slider"></div>\n            </div>\n\n            <div :obj="opacity" class="pcr-color-opacity" ').concat(c(t.opacity),'>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="opacity selection slider" role="slider"></div>\n            </div>\n          </div>\n\n          <div class="pcr-swatches ').concat(t.palette?"":"pcr-last",'" :ref="swatches"></div> \n\n          <div :obj="interaction" class="pcr-interaction" ').concat(c(Object.keys(t.interaction).length),'>\n            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ').concat(c(t.interaction.input),'>\n\n            <input :arr="options" class="pcr-type" data-type="HEXA" value="').concat(s?"HEX":"HEXA",'" type="button" ').concat(c(t.interaction.hex),'>\n            <input :arr="options" class="pcr-type" data-type="RGBA" value="').concat(s?"RGB":"RGBA",'" type="button" ').concat(c(t.interaction.rgba),'>\n            <input :arr="options" class="pcr-type" data-type="HSLA" value="').concat(s?"HSL":"HSLA",'" type="button" ').concat(c(t.interaction.hsla),'>\n            <input :arr="options" class="pcr-type" data-type="HSVA" value="').concat(s?"HSV":"HSVA",'" type="button" ').concat(c(t.interaction.hsva),'>\n            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ').concat(c(t.interaction.cmyk),'>\n\n            <input :ref="save" class="pcr-save" value="').concat(e.save||"Save",'" type="button" ').concat(c(t.interaction.save),' aria-label="save and exit">\n            <input :ref="cancel" class="pcr-cancel" value="').concat(e.cancel||"Cancel",'" type="button" ').concat(c(t.interaction.cancel),' aria-label="cancel and exit">\n            <input :ref="clear" class="pcr-clear" value="').concat(e.clear||"Clear",'" type="button" ').concat(c(t.interaction.clear),' aria-label="clear and exit">\n          </div>\n        </div>\n      </div>\n    ')),l=a.interaction;return l.options.find(t=>!t.hidden&&!t.classList.add("active")),l.type=()=>l.options.find(t=>t.classList.contains("active")),a})(t),t.useAsButton&&(this._root.button=t.el),t.container.appendChild(this._root.root)}_finalBuild(){const t=this.options,e=this._root;if(t.container.removeChild(e.root),t.inline){const o=t.el.parentElement;t.el.nextSibling?o.insertBefore(e.app,t.el.nextSibling):o.appendChild(e.app)}else t.container.appendChild(e.app);t.useAsButton?t.inline&&t.el.remove():t.el.parentNode.replaceChild(e.root,t.el),t.disabled&&this.disable(),t.comparison||(e.button.style.transition="none",t.useAsButton||(e.preview.lastColor.style.transition="none")),this.hide()}_buildComponents(){const t=this,e=this.options.components,o=(t.options.sliders||"v").repeat(2),[n,i]=o.match(/^[vh]+$/g)?o:[],r=()=>this._color||(this._color=this._lastColor.clone()),s={palette:E({element:t._root.palette.picker,wrapper:t._root.palette.palette,onstop:()=>t._emit("changestop",t),onchange(o,n){if(!e.palette)return;const i=r(),{_root:s,options:c}=t,{lastColor:a,currentColor:l}=s.preview;t._recalc&&(i.s=100*o,i.v=100-100*n,i.v<0&&(i.v=0),t._updateOutput());const p=i.toRGBA().toString(0);this.element.style.background=p,this.wrapper.style.background="\n                        linear-gradient(to top, rgba(0, 0, 0, ".concat(i.a,"), transparent),\n                        linear-gradient(to left, hsla(").concat(i.h,", 100%, 50%, ").concat(i.a,"), rgba(255, 255, 255, ").concat(i.a,"))\n                    "),c.comparison?c.useAsButton||t._lastColor||(a.style.color=p):(s.button.style.color=p,s.button.classList.remove("clear"));const u=i.toHEXA().toString();for(const{el:e,color:o}of t._swatchColors)e.classList[u===o.toHEXA().toString()?"add":"remove"]("pcr-active");l.style.color=p}}),hue:E({lock:"v"===i?"h":"v",element:t._root.hue.picker,wrapper:t._root.hue.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.hue||!e.palette)return;const n=r();t._recalc&&(n.h=360*o),this.element.style.backgroundColor="hsl(".concat(n.h,", 100%, 50%)"),s.palette.trigger()}}),opacity:E({lock:"v"===n?"h":"v",element:t._root.opacity.picker,wrapper:t._root.opacity.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.opacity||!e.palette)return;const n=r();t._recalc&&(n.a=Math.round(100*o)/100),this.element.style.background="rgba(0, 0, 0, ".concat(n.a,")"),s.palette.trigger()}}),selectable:P({elements:t._root.interaction.options,className:"active",onchange(e){t._representation=e.target.getAttribute("data-type").toUpperCase(),t._recalc&&t._updateOutput()}})};this._components=s}_bindEvents(){const{_root:t,options:e}=this,o=[a(t.interaction.clear,"click",()=>this._clearColor()),a([t.interaction.cancel,t.preview.lastColor],"click",()=>{this._emit("cancel",this),this.setHSVA(...(this._lastColor||this._color).toHSVA(),!0)}),a(t.interaction.save,"click",()=>{!this.applyColor()&&!e.showAlways&&this.hide()}),a(t.interaction.result,["keyup","input"],t=>{this.setColor(t.target.value,!0)&&!this._initializingActive&&this._emit("change",this._color),t.stopImmediatePropagation()}),a(t.interaction.result,["focus","blur"],t=>{this._recalc="blur"===t.type,this._recalc&&this._updateOutput()}),a([t.palette.palette,t.palette.picker,t.hue.slider,t.hue.picker,t.opacity.slider,t.opacity.picker],["mousedown","touchstart"],()=>this._recalc=!0)];if(!e.showAlways){const n=e.closeWithKey;o.push(a(t.button,"click",()=>this.isOpen()?this.hide():this.show()),a(document,"keyup",t=>this.isOpen()&&(t.key===n||t.code===n)&&this.hide()),a(document,["touchstart","mousedown"],e=>{this.isOpen()&&!d(e).some(e=>e===t.app||e===t.button)&&this.hide()},{capture:!0}))}if(e.adjustableNumbers){const e={rgba:[255,255,255,1],hsva:[360,100,100,1],hsla:[360,100,100,1],cmyk:[100,100,100,100]};m(t.interaction.result,(t,o,n)=>{const i=e[this.getColorRepresentation().toLowerCase()];if(i){const e=i[n],r=t+(e>=100?1e3*o:o);return r<=0?0:Number((r<e?r:e).toPrecision(3))}return t})}if(e.autoReposition&&!e.inline){let t=null;const n=this;o.push(a(window,["scroll","resize"],()=>{n.isOpen()&&(e.closeOnScroll&&n.hide(),null===t?(t=setTimeout(()=>t=null,100),requestAnimationFrame((function e(){n._rePositioningPicker(),null!==t&&requestAnimationFrame(e)}))):(clearTimeout(t),t=setTimeout(()=>t=null,100)))},{capture:!0}))}this._eventBindings=o}_rePositioningPicker(){const{options:t}=this;t.inline||this._nanopop.update(t.position,!this._recalc)}_updateOutput(){const{_root:t,_color:e,options:o}=this;if(t.interaction.type()){const n="to".concat(t.interaction.type().getAttribute("data-type"));t.interaction.result.value="function"==typeof e[n]?e[n]().toString(o.outputPrecision):""}!this._initializingActive&&this._recalc&&this._emit("change",e)}_clearColor(t=!1){const{_root:e,options:o}=this;o.useAsButton||(e.button.style.color="rgba(0, 0, 0, 0.15)"),e.button.classList.add("clear"),o.showAlways||this.hide(),this._lastColor=null,this._initializingActive||t||(this._emit("save",null),this._emit("clear",this))}_parseLocalColor(t){const{values:e,type:o,a:n}=function(t){t=t.match(/^[a-zA-Z]+$/)?function(t){if("black"===t.toLowerCase())return"#000";const e=document.createElement("canvas").getContext("2d");return e.fillStyle=t,"#000"===e.fillStyle?null:e.fillStyle}(t):t;const e={cmyk:/^cmyk[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)/i,rgba:/^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hsla:/^((hsla)|hsl)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hsva:/^((hsva)|hsv)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hexa:/^#?(([\dA-Fa-f]{3,4})|([\dA-Fa-f]{6})|([\dA-Fa-f]{8}))$/i},o=t=>t.map(t=>/^(|\d+)\.\d+|\d+$/.test(t)?Number(t):void 0);let n;t:for(const i in e){if(!(n=e[i].exec(t)))continue;const r=t=>!!n[2]==("number"==typeof t);switch(i){case"cmyk":{const[,t,e,r,s]=o(n);if(t>100||e>100||r>100||s>100)break t;return{values:O(t,e,r,s),type:i}}case"rgba":{const[,,,t,e,s,c]=o(n);if(t>255||e>255||s>255||c<0||c>1||!r(c))break t;return{values:[...S(t,e,s),c],a:c,type:i}}case"hexa":{let[,t]=n;4!==t.length&&3!==t.length||(t=t.split("").map(t=>t+t).join(""));const e=t.substring(0,6);let o=t.substring(6);return o=o?parseInt(o,16)/255:void 0,{values:[...A(e),o],a:o,type:i}}case"hsla":{const[,,,t,e,s,c]=o(n);if(t>360||e>100||s>100||c<0||c>1||!r(c))break t;return{values:[...C(t,e,s),c],a:c,type:i}}case"hsva":{const[,,,t,e,s,c]=o(n);if(t>360||e>100||s>100||c<0||c>1||!r(c))break t;return{values:[t,e,s,c],a:c,type:i}}}}return{values:null,type:null}}(t),{lockOpacity:i}=this.options,r=void 0!==n&&1!==n;return e&&3===e.length&&(e[3]=void 0),{values:!e||i&&r?null:e,type:o}}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this))}on(t,e){return"function"==typeof e&&"string"==typeof t&&t in this._eventListener&&this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t];if(o){const t=o.indexOf(e);~t&&o.splice(t,1)}return this}addSwatch(t){const{values:e}=this._parseLocalColor(t);if(e){const{_swatchColors:t,_root:o}=this,n=j(...e),i=p('<button type="button" style="color: '.concat(n.toRGBA().toString(0),'" aria-label="color swatch"/>'));return o.swatches.appendChild(i),t.push({el:i,color:n}),this._eventBindings.push(a(i,"click",()=>{this.setHSVA(...n.toHSVA(),!0),this._emit("swatchselect",n),this._emit("change",n)})),!0}return!1}removeSwatch(t){const e=this._swatchColors[t];if(e){const{el:o}=e;return this._root.swatches.removeChild(o),this._swatchColors.splice(t,1),!0}return!1}applyColor(t=!1){const{preview:e,button:o}=this._root,n=this._color.toRGBA().toString(0);return e.lastColor.style.color=n,this.options.useAsButton||(o.style.color=n),o.classList.remove("clear"),this._lastColor=this._color.clone(),this._initializingActive||t||this._emit("save",this._color),this}destroy(){this._eventBindings.forEach(t=>l(...t)),Object.keys(this._components).forEach(t=>this._components[t].destroy())}destroyAndRemove(){this.destroy();const{root:t,app:e}=this._root;t.parentElement&&t.parentElement.removeChild(t),e.parentElement.removeChild(e),Object.keys(this).forEach(t=>this[t]=null)}hide(){return this._root.app.classList.remove("visible"),this._emit("hide",this),this}show(){return this.options.disabled||(this._root.app.classList.add("visible"),this._rePositioningPicker(),this._emit("show",this)),this}isOpen(){return this._root.app.classList.contains("visible")}setHSVA(t=360,e=0,o=0,n=1,i=!1){const r=this._recalc;if(this._recalc=!1,t<0||t>360||e<0||e>100||o<0||o>100||n<0||n>1)return!1;this._color=j(t,e,o,n);const{hue:s,opacity:c,palette:a}=this._components;return s.update(t/360),c.update(n),a.update(e/100,1-o/100),i||this.applyColor(),r&&this._updateOutput(),this._recalc=r,!0}setColor(t,e=!1){if(null===t)return this._clearColor(e),!0;const{values:o,type:n}=this._parseLocalColor(t);if(o){const t=n.toUpperCase(),{options:i}=this._root.interaction,r=i.find(e=>e.getAttribute("data-type")===t);if(r&&!r.hidden)for(const t of i)t.classList[t===r?"add":"remove"]("active");return!!this.setHSVA(...o,e)&&this.setColorRepresentation(t)}return!1}setColorRepresentation(t){return t=t.toUpperCase(),!!this._root.interaction.options.find(e=>e.getAttribute("data-type").startsWith(t)&&!e.click())}getColorRepresentation(){return this._representation}getColor(){return this._color}getSelectedColor(){return this._lastColor}getRoot(){return this._root}disable(){return this.hide(),this.options.disabled=!0,this._root.button.classList.add("disabled"),this}enable(){return this.options.disabled=!1,this._root.button.classList.remove("disabled"),this}}T.utils=n,T.libs={HSVaColor:j,Moveable:E,Nanopop:L,Selectable:P},T.create=t=>new T(t),T.version=g.a,e.default=T}]).default},function(t,e,o){"use strict";o.r(e);var n=o(1),i=o.n(n),r=o(0),s=o.n(r);const{min:c,max:a,floor:l,round:p}=Math;o(6);var u=o(2),h=o.n(u),d=()=>u.utils.createFromTemplate(`\n<div class="gpickr" :ref="root">\n\n    <div :ref="pickr"></div>\n    <div :obj="gradient" class="gpcr-interaction">\n    <div :ref="result" class="gpcr-result">\n        \n         <div :ref="mode" data-mode="linear" class="gpcr-mode"></div>\n\n            <div :ref="angle" class="gpcr-angle">\n                <div :ref="arrow"></div>\n            </div>\n\n            <div :ref="pos" class="gpcr-pos">\n                ${["tl","tm","tr","l","m","r","bl","bm","br"].map(t=>`<div data-pos="${t}"></div>`).join("")}\n            </div>\n        </div>\n\n        <div :obj="stops" class="gpcr-stops">\n            <div :ref="preview" class="gpcr-stop-preview"></div>\n            <div :ref="markers" class="gpcr-stop-marker"></div>\n        </div>\n       \n    </div>\n\n</div>\n`),f=t=>{const e=t.touches&&t.touches[0]||t;return{tap:e,x:e.clientX,y:e.clientY,target:e.target}};let m=document.createElement("p");function*g(t,e,o=-1){for(let n;n=e.exec(t);)yield~o?n[o].trim():n.map(t=>t.trim())}function b(t,e,o=-1){const n=t.match(e);return n?~o?n[o]:n:null}function v(t){const e="rgba(0, 0, 0, 0)";if(m.style.color=e,t===e)return t;m.style.color=t;const o=getComputedStyle(m).color;return o===e?null:o}function _(t){if(!(t=function(t){return m.style.backgroundImage=t,getComputedStyle(m).backgroundImage}(t)))return null;const[,e,o]=t.match(/^(\w+)-gradient\((.*)\)$/i)||[];if(!e||!o)return null;const n=[...g(o,/(rgba?\(.*?\)|#?\w+)(.*?)(?=,|$)/gi)],i=[];let r=null,s=null;for(let t=0;t<n.length;t++){const[e,o,c]=n[t],a=v(o),l=c.split(/\s+/g).map(t=>b(t,/^-?(\d*(\.\d+)?)%$/,1)).filter(Boolean).map(Number);if(!l.length&&a)i.push({loc:null,color:a});else if(l.length)for(const t of l)i.push({loc:t,color:a||s});else r||(r=e);s=a||s}i[i.length-1].loc||(i[i.length-1].loc=100);for(let t=0;t<i.length;t++){const e=i[t];if(!e.loc)if(t){let o=2,n=t+1;for(;n<i.length&&!i[n].loc;n++)o++;e.loc=i[t-1].loc+(i[n].loc-i[t-1].loc)/o}else e.loc=0}return{str:t,type:e,modifier:r,stops:i}}var y=t=>{document.body.appendChild(m);const e=_(t);return document.body.removeChild(m),e};function w(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}const k="focused-stop",{utils:S}=h.a,{on:O,off:C}=S,A=t=>{const e=Object.assign({cmyk:!1,hex:!1,hsla:!1,hsva:!1,rgba:!0,cancel:!1,clear:!1,save:!1,input:!0,swatches:[],theme:"classic",preview:!0,opacity:!0,hue:!0,palette:!0},t.pickr);return delete t.pickr,t.angle||(t.angle=0),t.mode||(t.mode="linear"),t.stops||(t.stops=[["#42445a",0],["#20b6dd",1]]),Object.assign({conic:!1,linear:!0,radial:!0,lockOpacity:!1,pickr:e},t)};class j{constructor(t){w(this,"_stops",[]),w(this,"_angle",0),w(this,"_angles",[{angle:0,name:"to top"},{angle:90,name:"to right"},{angle:180,name:"to bottom"},{angle:270,name:"to left"},{angle:45,name:"to top right"},{angle:45,name:"to right top"},{angle:135,name:"to right bottom"},{angle:135,name:"to bottom right"},{angle:225,name:"to left bottom"},{angle:225,name:"to bottom left"},{angle:315,name:"to top left"},{angle:315,name:"to left top"}]),w(this,"_direction","circle at center"),w(this,"_directions",[{pos:"tl",css:"circle at left top"},{pos:"tm",css:"circle at center top"},{pos:"tr",css:"circle at right top"},{pos:"r",css:"circle at right"},{pos:"m",css:"circle at center"},{pos:"l",css:"circle at left"},{pos:"br",css:"circle at right bottom"},{pos:"bm",css:"circle at center bottom"},{pos:"bl",css:"circle at left bottom"}]),w(this,"_focusedStop",null),w(this,"_mode","linear"),w(this,"_modes",[]),w(this,"_root",null),w(this,"_eventListener",{init:[],change:[],colorChange:[]}),t=A(t),this._root=d(t),t.angle&&(this._angle=t.angle),t.radial&&this._modes.push("radial"),t.conic&&CSS.supports("background-image","conic-gradient(#fff, #fff)")&&this._modes.push("conic"),(t.linear||0===this._modes.length)&&this._modes.push("linear"),t.mode&&-1!==this._modes.indexOf(t.mode)&&(this._mode=t.mode),t.el=t.el.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document),t.el.parentElement.replaceChild(this._root.root,t.el),this._pickr=h.a.create({el:this._root.pickr,theme:t.pickr.theme,inline:!0,useAsButton:!0,showAlways:!0,defaultRepresentation:"HEXA",swatches:t.pickr.swatches,lockOpacity:t.pickr.lockOpacity,components:{palette:t.pickr.palette,preview:t.pickr.preview,opacity:t.pickr.opacity,hue:t.pickr.hue,interaction:{input:t.pickr.input,hex:t.pickr.hex,rgba:t.pickr.rgba,cmyk:t.pickr.cmyk,hsla:t.pickr.hsla,hsva:t.pickr.hsva,cancel:t.pickr.cancel,clear:t.pickr.clear,save:t.pickr.save}}}).on("change",t=>{this._focusedStop&&(this._focusedStop.color=t.toRGBA().toString(0),this._render())}).on("init",()=>{for(const[e,o]of t.stops)this.addStop(e,o,!0);this._bindEvents(),this._emit("init",this)})}_bindEvents(){const{gradient:t}=this._root;O(t.mode,["mousedown","touchstart"],t=>{const e=this._modes.indexOf(this._mode)+1;this._mode=this._modes[e===this._modes.length?0:e],this._render(),t.stopPropagation()}),O(t.stops.preview,"click",t=>{this.addStop(this._pickr.getColor().toRGBA().toString(),this._resolveColorStopPosition(t.pageX))}),O(t.result,["mousedown","touchstart"],e=>{if(e.preventDefault(),"linear"!==this._mode)return;t.angle.classList.add("gpcr-active");const o=O(window,["mousemove","touchmove"],e=>{const{x:o,y:n}=f(e),i=t.angle.getBoundingClientRect(),r=i.left+i.width/2,s=i.top+i.height/2,c=Math.atan2(o-r,n-s)-Math.PI,a=Math.abs(180*c/Math.PI),l=[1,2,4][Number(e.shiftKey||2*e.ctrlKey)];this.setLinearAngle(a-a%(45/l))}),n=O(window,["mouseup","touchend","touchcancel"],()=>{t.angle.classList.remove("gpcr-active"),C(...o),C(...n)})}),O(t.pos,["mousedown","touchstart"],t=>{const e=t.target.getAttribute("data-pos"),o=this._directions.find(t=>t.pos===e);this.setRadialPosition(o&&o.css||this._direction)})}_getAngleFromString(t){t=t.toLowerCase();const e=this._angles.find(e=>e.name===t);return e?e.angle:void 0}_render(t=!1){const{stops:{preview:e},result:o,arrow:n,angle:i,pos:r,mode:s}=this._root.gradient,{_stops:c,_mode:a,_angle:l}=this;c.sort((t,e)=>t.loc-e.loc);for(const{color:t,el:e,loc:o}of c)Object.assign(e.style,{left:`${100*o}%`,color:t});const p="number"==typeof l?l:this._getAngleFromString(l)||0;n.style.transform=`rotate(${p-90}deg)`,e.style.background=`linear-gradient(to right, ${this.getStops().toString("linear")})`,o.style.background=this.getGradient().toString(),r.style.opacity="radial"===a?"":"0",r.style.visibility="radial"===a?"":"hidden",i.style.opacity="linear"===a?"":"0",i.style.visibility="linear"===a?"":"hidden",s.setAttribute("data-mode",a),!t&&this._emit("change",this)}_resolveColorStopPosition(t){const{markers:e}=this._root.gradient.stops,o=e.getBoundingClientRect();let n=(t-o.left)/o.width;return n<0&&(n=0),n>1&&(n=1),n}addStop(t,e=.5,o=!1){const{markers:n}=this._root.gradient.stops,i=S.createElementFromString('<div class="gpcr-marker"></div>');n.appendChild(i);const r={el:i,loc:e,color:t,listener:O(i,["mousedown","touchstart"],t=>{t.preventDefault();const e=n.getBoundingClientRect();this.setFocusedStop(r),this._pickr.setColor(r.color);let o=!1;const s=O(window,["mousemove","touchmove"],t=>{const{x:n,y:s}=f(t),c=Math.abs(s-e.y);o=c>50&&this._stops.length>2,i.style.opacity=o?"0":"1",o||(r.loc=this._resolveColorStopPosition(n),this._render())}),c=O(window,["mouseup","touchend","touchcancel"],()=>{C(...s),C(...c),o&&(this.removeStop(r),this._render(!0))})})};return this.setFocusedStop(r),this._stops.push(r),this._pickr.setColor(t),t=this._pickr.getColor().toRGBA().toString(0),this._render(o),this}setFocusedStop(t){this._stops.forEach(t=>{t.el.classList.contains(k)&&t.el.classList.remove(k)}),t.el.classList.add(k),this._focusedStop=t}removeStop(t){const{_stops:e}=this,o=(()=>"number"==typeof t?e.find(t=>t.loc===t):"string"==typeof t?e.find(t=>t.color===t):"object"==typeof t?t:void 0)();e.splice(e.indexOf(o),1),o.el.remove(),C(...o.listener),this._focusedStop===o&&this.setFocusedStop(e[0]),this._render()}clearStops(){this._stops.forEach(t=>this.removeStop(t))}replaceStops(t){if(t){this.clearStops();for(const[e,o]of t)this.addStop(e,o,!0)}}setGradient(t){const e=y(t);if(!e||e.stops.length<2)return!1;const{type:o,stops:n,modifier:i}=e,r=[...this._stops];if(this._modes.includes(o)){this._mode=o;for(const t of n)this.addStop(t.color,t.loc/100);for(const t of r)this.removeStop(t);return"linear"===o?(this._angle=180,i&&this.setLinearAngle(i)):"radial"===o&&(this._direction="circle at center",i&&this.setRadialPosition(i)),!0}return!1}getGradient(t=this._mode){const e=this.getStops().toString(t);switch(t){case"linear":if("number"==typeof this._angle)return`linear-gradient(${this._angle}deg, ${e})`;if("string"==typeof this._angle)return`linear-gradient(${this._angle}, ${e})`;break;case"radial":return`radial-gradient(${this._direction}, ${e})`;case"conic":return`conic-gradient(${e})`}}getStops(){const t=this._stops.map(t=>({color:t.color,location:t.loc})),e=this._mode;return t.toString=function(t=e){switch(t){case"linear":case"radial":return this.map(t=>`${t.color} ${100*t.location}%`).join(",");case"conic":return this.map(t=>`${t.color} ${360*t.location}deg`).join(",")}},t}getLinearAngle(){return"linear"===this._mode?this._angle:-1}isValidDirectionString(t){return!!t.match(/^to (left (top|bottom)|right (top|bottom)|left|right|top|bottom)/i)}setLinearAngle(t){return("number"==typeof(t="number"==typeof t?t:this.isValidDirectionString(t)&&t)||"string"==typeof t)&&(this._angle=t,this._render(),!0)}setRadialPosition(t){const e=this._directions.find(e=>e.css===t);if(!e)return!1;this._direction=e.css;for(const t of Array.from(this._root.gradient.pos.children))t.classList[t.getAttribute("data-pos")===e.pos?"add":"remove"]("gpcr-active");return this._render(),!0}getRadialPosition(){return"radial"===this._mode?this._direction:null}setMode(t){this._mode=t,this._render()}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this))}on(t,e){return"function"==typeof e&&"string"==typeof t&&t in this._eventListener&&this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t];if(o){const t=o.indexOf(e);~t&&o.splice(t,1)}return this}}j.Pickr=h.a;var x=j;o.d(e,"default",(function(){return P})),o.d(e,"linearDirections",(function(){return E}));const E={TO_TOP:"to top",TO_RIGHT:"to right",TO_BOTTOM:"to bottom",TO_LEFT:"to left",TO_TOP_RIGHT:"to top right",TO_TOP_LEFT:"to top left",TO_BOTTOM_RIGHT:"to bottom right",TO_BOTTOM_LEFT:"to bottom left"},P=({angle:t,mode:e,onChange:o,pickr:r,setAngle:s,setMode:c,stops:a})=>{const[l,p]=Object(n.useState)(),[u,h]=Object(n.useState)(!1),d=Object(n.useRef)(null);Object(n.useEffect)(()=>{e||(e="linear",c&&c(e))},[]),Object(n.useEffect)(()=>{d&&p(new x({el:".gpickr",angle:t,mode:e,stops:a,pickr:{...r}}).on("init",()=>{h(!0)}))},[d]);const f=n=>{s&&n._angle!==t&&s(n._angle),c&&n._mode!==e&&c(n._mode),o&&o(n)};return Object(n.useEffect)(()=>{l&&o&&l.on("change",f)},[l]),Object(n.useEffect)(()=>{l&&u&&l._angle!==t&&l.setLinearAngle(t)},[l,u,t]),Object(n.useEffect)(()=>{l&&u&&l._mode!==e&&l.setMode(e)},[l,u,e]),i.a.createElement("div",{className:"gpickr",ref:d})};P.propTypes={angle:s.a.oneOfType([s.a.string,s.a.number]),onChange:s.a.func,mode:s.a.string,setAngle:s.a.func,setMode:s.a.func,stops:s.a.arrayOf(s.a.arrayOf(s.a.oneOfType([s.a.string,s.a.number]))),pickr:s.a.shape({theme:s.a.string,swatches:s.a.arrayOf(s.a.string),lockOpacity:s.a.bool,palette:s.a.bool,preview:s.a.bool,opacity:s.a.bool,hue:s.a.bool,input:s.a.bool,hex:s.a.bool,rgba:s.a.bool,cmyk:s.a.bool,hsla:s.a.bool,hsva:s.a.bool,cancel:s.a.bool,clear:s.a.bool,save:s.a.bool})},P.defaultProps={pickr:{theme:"nano"}}},function(t,e,o){"use strict";var n=o(5);function i(){}function r(){}r.resetWarningCache=i,t.exports=function(){function t(t,e,o,i,r,s){if(s!==n){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function e(){return t}t.isRequired=t;var o={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:r,resetWarningCache:i};return o.PropTypes=o,o}},function(t,e,o){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,o){}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJhbWRcIjpcIlJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNpbW9ud2VwL3BpY2tyL2Rpc3QvcGlja3IubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ac2ltb253ZXAvcGlja3Ivc3JjL2pzL3V0aWxzL2NvbG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90ZW1wbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvc2ltcGxpZnlFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvcGFyc2VHcmFkaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZ3BpY2tyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9HcmFkaWVudFBpY2tlci5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImUiLCJkZWZhdWx0IiwiSlNPTiIsInBhcnNlIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInB1c2giLCJhcHBseSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiSFRNTENvbGxlY3Rpb24iLCJOb2RlTGlzdCIsIkFycmF5IiwiZnJvbSIsImlzQXJyYXkiLCJjYXB0dXJlIiwic2xpY2UiLCJhIiwidSIsImgiLCJmIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwidHJpbSIsImZpcnN0RWxlbWVudENoaWxkIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiY2hpbGRyZW4iLCJwYXRoIiwiY29tcG9zZWRQYXRoIiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsIkVsZW1lbnQiLCJzcGxpdCIsInJlZHVjZSIsInF1ZXJ5U2VsZWN0b3IiLCJzaGFkb3dSb290IiwiTnVtYmVyIiwic2hpZnRLZXkiLCJjdHJsS2V5IiwiZGVsdGFZIiwic2VsZWN0aW9uU3RhcnQiLCJyZXBsYWNlIiwiZm9jdXMiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInByZXZlbnREZWZhdWx0IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwicGFzc2l2ZSIsInYiLCJtaW4iLCJiIiwibWF4IiwieSIsImZsb29yIiwiZyIsInJvdW5kIiwiXyIsIk1hdGgiLCJ3IiwiQSIsIkMiLCJrIiwiUyIsIk8iLCJtYXRjaCIsIm1hcCIsInBhcnNlSW50IiwieCIsInRvRml4ZWQiLCJ0b0hTVkEiLCJ0b1N0cmluZyIsImNvbmNhdCIsInRvSFNMQSIsInRvUkdCQSIsInRvQ01ZSyIsInRvSEVYQSIsInBhZFN0YXJ0IiwidG9VcHBlckNhc2UiLCJqb2luIiwiY2xvbmUiLCJFIiwiTCIsIm9wdGlvbnMiLCJhc3NpZ24iLCJsb2NrIiwib25jaGFuZ2UiLCJvbnN0b3AiLCJfa2V5Ym9hcmQiLCJ0eXBlIiwiYWN0aXZlRWxlbWVudCIsIndyYXBwZXIiLCJ1cGRhdGUiLCJjYWNoZSIsInN0YXJ0c1dpdGgiLCJfdGFwc3RhcnQiLCJfdGFwc3RvcCIsIl90YXBtb3ZlIiwiZWxlbWVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsImxlZnQiLCJ3aWR0aCIsInRvcCIsImhlaWdodCIsInN0eWxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ0cmlnZ2VyIiwiZGVzdHJveSIsIlAiLCJjbGFzc05hbWUiLCJlbGVtZW50cyIsImNsYXNzTGlzdCIsIkIiLCJlbCIsInJlZmVyZW5jZSIsInBhZGRpbmciLCJzdGFydCIsIm1pZGRsZSIsImVuZCIsInJpZ2h0IiwiYm90dG9tIiwicG9zaXRpb24iLCJ2YXJpYW50IiwiaXNWZXJ0aWNhbCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsIkgiLCJSIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwiaW5pdCIsInNhdmUiLCJoaWRlIiwic2hvdyIsImNsZWFyIiwiY2hhbmdlIiwiY2hhbmdlc3RvcCIsImNhbmNlbCIsInN3YXRjaHNlbGVjdCIsImFwcENsYXNzIiwidGhlbWUiLCJ1c2VBc0J1dHRvbiIsImRpc2FibGVkIiwiY29tcGFyaXNvbiIsImNsb3NlT25TY3JvbGwiLCJvdXRwdXRQcmVjaXNpb24iLCJsb2NrT3BhY2l0eSIsImF1dG9SZXBvc2l0aW9uIiwiY29udGFpbmVyIiwiY29tcG9uZW50cyIsImludGVyYWN0aW9uIiwic3RyaW5ncyIsInN3YXRjaGVzIiwiaW5saW5lIiwic2xpZGVycyIsImRlZmF1bHRSZXByZXNlbnRhdGlvbiIsImFkanVzdGFibGVOdW1iZXJzIiwic2hvd0Fsd2F5cyIsImNsb3NlV2l0aEtleSIsImluY2x1ZGVzIiwicHJldmlldyIsIm9wYWNpdHkiLCJodWUiLCJwYWxldHRlIiwiX3ByZUJ1aWxkIiwiX2J1aWxkQ29tcG9uZW50cyIsIl9iaW5kRXZlbnRzIiwiX2ZpbmFsQnVpbGQiLCJhZGRTd2F0Y2giLCJidXR0b24iLCJhcHAiLCJfcm9vdCIsIl9uYW5vcG9wIiwic2V0QXR0cmlidXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0Q29sb3IiLCJfcmVQb3NpdGlvbmluZ1BpY2tlciIsIl9yZXByZXNlbnRhdGlvbiIsInNldENvbG9yUmVwcmVzZW50YXRpb24iLCJfaW5pdGlhbGl6aW5nQWN0aXZlIiwiX2VtaXQiLCJpbnB1dCIsImhleCIsInJnYmEiLCJoc2xhIiwiaHN2YSIsImNteWsiLCJmaW5kIiwiaGlkZGVuIiwiYWRkIiwiY29udGFpbnMiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmUiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiZGlzYWJsZSIsInRyYW5zaXRpb24iLCJsYXN0Q29sb3IiLCJyZXBlYXQiLCJfY29sb3IiLCJfbGFzdENvbG9yIiwicGlja2VyIiwiY3VycmVudENvbG9yIiwiX3JlY2FsYyIsIl91cGRhdGVPdXRwdXQiLCJiYWNrZ3JvdW5kIiwiY29sb3IiLCJfc3dhdGNoQ29sb3JzIiwic2xpZGVyIiwiYmFja2dyb3VuZENvbG9yIiwic2VsZWN0YWJsZSIsIl9jb21wb25lbnRzIiwiX2NsZWFyQ29sb3IiLCJzZXRIU1ZBIiwiYXBwbHlDb2xvciIsInJlc3VsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImlzT3BlbiIsImNvZGUiLCJzb21lIiwiZ2V0Q29sb3JSZXByZXNlbnRhdGlvbiIsInRvTG93ZXJDYXNlIiwidG9QcmVjaXNpb24iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiX2V2ZW50QmluZGluZ3MiLCJfcGFyc2VMb2NhbENvbG9yIiwidmFsdWVzIiwiZ2V0Q29udGV4dCIsImZpbGxTdHlsZSIsImhleGEiLCJ0ZXN0IiwiZXhlYyIsInN1YnN0cmluZyIsImoiLCJfZXZlbnRMaXN0ZW5lciIsIm9uIiwib2ZmIiwiaW5kZXhPZiIsInNwbGljZSIsInJlbW92ZVN3YXRjaCIsImRlc3Ryb3lBbmRSZW1vdmUiLCJjbGljayIsImdldENvbG9yIiwiZ2V0U2VsZWN0ZWRDb2xvciIsImdldFJvb3QiLCJlbmFibGUiLCJ1dGlscyIsImxpYnMiLCJIU1ZhQ29sb3IiLCJNb3ZlYWJsZSIsIk5hbm9wb3AiLCJTZWxlY3RhYmxlIiwidmVyc2lvbiIsImNyZWF0ZUZyb21UZW1wbGF0ZSIsImV2dCIsInRhcCIsInRzIiwibWF0Y2hBbGwiLCJjb250ZW50IiwicmVnZXhwIiwiZ3JvdXAiLCJwYXJzZUNvbG9yIiwic3RyIiwiZGVmIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBhcnNlR3JhZGllbnQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJub3JtYWxpemVHcmFkaWVudCIsInJhd3N0b3BzIiwic3RvcHMiLCJtb2RpZmllciIsImZ1bGwiLCJyYyIsInJsIiwibG9jcyIsIkJvb2xlYW4iLCJsb2MiLCJzdG9wIiwiZGl2aWRlciIsImJvZHkiLCJGT0NVU0VEX1NUT1AiLCJQaWNrciIsInNldERlZmF1bHRzIiwib3B0IiwicGlja3IiLCJhbmdsZSIsImNvbmljIiwibGluZWFyIiwicmFkaWFsIiwiR1BpY2tyIiwicG9zIiwiY3NzIiwiY29sb3JDaGFuZ2UiLCJidWlsZEdQaWNrciIsIl9hbmdsZSIsIl9tb2RlcyIsIkNTUyIsInN1cHBvcnRzIiwiX21vZGUiLCJwdiIsImN2IiwiY2kiLCJfcGlja3IiLCJfZm9jdXNlZFN0b3AiLCJfcmVuZGVyIiwiYWRkU3RvcCIsImdyYWRpZW50IiwibmV4dEluZGV4Iiwic3RvcFByb3BhZ2F0aW9uIiwiX3Jlc29sdmVDb2xvclN0b3BQb3NpdGlvbiIsInBhZ2VYIiwic2ltcGxpZnlFdmVudCIsImJveCIsImJveGN4IiwiYm94Y3kiLCJyYWRpYW5zIiwiYXRhbjIiLCJQSSIsImRlZ3JlZXMiLCJhYnMiLCJkaXYiLCJzZXRMaW5lYXJBbmdsZSIsInBhaXIiLCJfZGlyZWN0aW9ucyIsInNldFJhZGlhbFBvc2l0aW9uIiwiX2RpcmVjdGlvbiIsIl9nZXRBbmdsZUZyb21TdHJpbmciLCJfYW5nbGVzIiwiYW5nIiwidW5kZWZpbmVkIiwic2lsZW50IiwiYXJyb3ciLCJfc3RvcHMiLCJzb3J0IiwiYXJyb3dEaXIiLCJ0cmFuc2Zvcm0iLCJnZXRTdG9wcyIsImdldEdyYWRpZW50IiwidmlzaWJpbGl0eSIsIm1hcmtlcnMiLCJtYmNyIiwiY3JlYXRlRWxlbWVudEZyb21TdHJpbmciLCJsaXN0ZW5lciIsIm1hcmtlcnNiY3IiLCJzZXRGb2N1c2VkU3RvcCIsInJvb3REaXN0YW5jZSIsInJlbW92ZVN0b3AiLCJjbGVhclN0b3BzIiwicmVwbGFjZVN0b3BzIiwic2V0R3JhZGllbnQiLCJwYXJzZWQiLCJvbGRTdG9wcyIsImxpbmVhclN0b3BzIiwibG9jYXRpb24iLCJnZXRMaW5lYXJBbmdsZSIsImlzVmFsaWREaXJlY3Rpb25TdHJpbmciLCJkaXIiLCJjaGlsZCIsImdldFJhZGlhbFBvc2l0aW9uIiwic2V0TW9kZSIsImV2ZW50IiwiYXJncyIsImNiIiwiY2FsbEJhY2tzIiwiaW5kZXgiLCJsaW5lYXJEaXJlY3Rpb25zIiwiVE9fVE9QIiwiVE9fUklHSFQiLCJUT19CT1RUT00iLCJUT19MRUZUIiwiVE9fVE9QX1JJR0hUIiwiVE9fVE9QX0xFRlQiLCJUT19CT1RUT01fUklHSFQiLCJUT19CT1RUT01fTEVGVCIsIkdyYWRpZW50UGlja2VyIiwib25DaGFuZ2UiLCJzZXRBbmdsZSIsImdwaWNrciIsInNldEdwaWNrciIsInVzZVN0YXRlIiwiaW5pdGlhbGl6ZWQiLCJzZXRJbml0aWFsaXplZCIsImdwaWNrclJlZiIsInVzZVJlZiIsInVzZUVmZmVjdCIsIkdwaWNrciIsIm9uR3BpY2tyQ2hhbmdlIiwiaW5zdCIsInJlZiIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9uZU9mVHlwZSIsInN0cmluZyIsIm51bWJlciIsImZ1bmMiLCJhcnJheU9mIiwic2hhcGUiLCJib29sIiwiZGVmYXVsdFByb3BzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZXJyIiwiRXJyb3IiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJzeW1ib2wiLCJhbnkiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiXSwibWFwcGluZ3MiOiJDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQ1IsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxlQUFnQixDQUFDLFNBQVVKLEdBQ1IsaUJBQVpDLFFBQ2RBLFFBQVEsZ0JBQWtCRCxFQUFRRyxRQUFRLFVBRTFDSixFQUFLLGdCQUFrQkMsRUFBUUQsRUFBWSxPQVI3QyxDQVNHTyxRQUFRLFNBQVNDLEdBQ3BCLE8sWUNURSxJQUFJQyxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVVCxRQUduQyxJQUFJQyxFQUFT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QUFVTyxLQUNqQjNOLElBQUtvTixJQUFVTyxLQUNmMU4sS0FBTW1OLElBQVVPLEtBQ2hCdk4sS0FBTWdOLElBQVVPLEtBQ2hCek4sS0FBTWtOLElBQVVPLEtBQ2hCeE4sS0FBTWlOLElBQVVPLEtBQ2hCeFEsT0FBUWlRLElBQVVPLEtBQ2xCM1EsTUFBT29RLElBQVVPLEtBQ2pCOVEsS0FBTXVRLElBQVVPLFFBSXhCdkIsRUFBZXdCLGFBQWUsQ0FDMUJsSCxNQUFPLENBQ0hwSixNQUFPLFUsNkJDeEhmLElBQUl1USxFQUF1QnZjLEVBQVEsR0FFbkMsU0FBU3djLEtBQ1QsU0FBU0MsS0FDVEEsRUFBdUJDLGtCQUFvQkYsRUFFM0N6YyxFQUFPRCxRQUFVLFdBQ2YsU0FBUzZjLEVBQUtDLEVBQU9DLEVBQVVDLEVBQWVyRCxFQUFVc0QsRUFBY0MsR0FDcEUsR0FBSUEsSUFBV1QsRUFBZixDQUlBLElBQUlVLEVBQU0sSUFBSUMsTUFDWixtTEFLRixNQURBRCxFQUFJbGMsS0FBTyxzQkFDTGtjLEdBR1IsU0FBU0UsSUFDUCxPQUFPUixFQUZUQSxFQUFLUyxXQUFhVCxFQU1sQixJQUFJVSxFQUFpQixDQUNuQkMsTUFBT1gsRUFDUE4sS0FBTU0sRUFDTlQsS0FBTVMsRUFDTlYsT0FBUVUsRUFDUnphLE9BQVF5YSxFQUNSWCxPQUFRVyxFQUNSWSxPQUFRWixFQUVSYSxJQUFLYixFQUNMUixRQUFTZ0IsRUFDVGpVLFFBQVN5VCxFQUNUYyxZQUFhZCxFQUNiZSxXQUFZUCxFQUNaUSxLQUFNaEIsRUFDTmlCLFNBQVVULEVBQ1ZVLE1BQU9WLEVBQ1BwQixVQUFXb0IsRUFDWGYsTUFBT2UsRUFDUFcsTUFBT1gsRUFFUFksZUFBZ0J0QixFQUNoQkMsa0JBQW1CRixHQUtyQixPQUZBYSxFQUFldkIsVUFBWXVCLEVBRXBCQSxJLDZCQ25EVHRkLEVBQU9ELFFBRm9CLGdEIiwiZmlsZSI6IkdyYWRpZW50UGlja2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJyZWFjdC1ncGlja3JcIiwgW1wiUmVhY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wicmVhY3QtZ3BpY2tyXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInJlYWN0LWdwaWNrclwiXSA9IGZhY3Rvcnkocm9vdFtcIlJlYWN0XCJdKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvZGlzdC9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187IiwiLyohIFBpY2tyIDEuNS4xIE1JVCB8IGh0dHBzOi8vZ2l0aHViLmNvbS9TaW1vbndlcC9waWNrciAqL1xuIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5QaWNrcj1lKCk6dC5QaWNrcj1lKCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbyhuKXtpZihlW25dKXJldHVybiBlW25dLmV4cG9ydHM7dmFyIGk9ZVtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbbl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbyksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gby5tPXQsby5jPWUsby5kPWZ1bmN0aW9uKHQsZSxuKXtvLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxvLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sby50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1vKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoby5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgaSBpbiB0KW8uZChuLGksZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxpKSk7cmV0dXJuIG59LG8ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gby5kKGUsXCJhXCIsZSksZX0sby5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxvLnA9XCJcIixvKG8ucz0xKX0oW2Z1bmN0aW9uKHQpe3QuZXhwb3J0cz1KU09OLnBhcnNlKCd7XCJhXCI6XCIxLjUuMVwifScpfSxmdW5jdGlvbih0LGUsbyl7XCJ1c2Ugc3RyaWN0XCI7by5yKGUpO3ZhciBuPXt9O2Z1bmN0aW9uIGkodCxlKXt2YXIgbz1PYmplY3Qua2V5cyh0KTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpO2UmJihuPW4uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGUpLmVudW1lcmFibGV9KSkpLG8ucHVzaC5hcHBseShvLG4pfXJldHVybiBvfWZ1bmN0aW9uIHIodCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIG89bnVsbCE9YXJndW1lbnRzW2VdP2FyZ3VtZW50c1tlXTp7fTtlJTI/aShPYmplY3QobyksITApLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ModCxlLG9bZV0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobykpOmkoT2JqZWN0KG8pKS5mb3JFYWNoKChmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobyxlKSl9KSl9cmV0dXJuIHR9ZnVuY3Rpb24gcyh0LGUsbyl7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpvLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1vLHR9ZnVuY3Rpb24gYyh0LGUsbyxuLGk9e30pe2UgaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbnx8ZSBpbnN0YW5jZW9mIE5vZGVMaXN0P2U9QXJyYXkuZnJvbShlKTpBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pLEFycmF5LmlzQXJyYXkobyl8fChvPVtvXSk7Zm9yKGNvbnN0IHMgb2YgZSlmb3IoY29uc3QgZSBvZiBvKXNbdF0oZSxuLHIoe2NhcHR1cmU6ITF9LGkpKTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpfW8ucihuKSxvLmQobixcIm9uXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSksby5kKG4sXCJvZmZcIiwoZnVuY3Rpb24oKXtyZXR1cm4gbH0pKSxvLmQobixcImNyZWF0ZUVsZW1lbnRGcm9tU3RyaW5nXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHB9KSksby5kKG4sXCJyZW1vdmVBdHRyaWJ1dGVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gdX0pKSxvLmQobixcImNyZWF0ZUZyb21UZW1wbGF0ZVwiLChmdW5jdGlvbigpe3JldHVybiBofSkpLG8uZChuLFwiZXZlbnRQYXRoXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGR9KSksby5kKG4sXCJyZXNvbHZlRWxlbWVudFwiLChmdW5jdGlvbigpe3JldHVybiBmfSkpLG8uZChuLFwiYWRqdXN0YWJsZUlucHV0TnVtYmVyc1wiLChmdW5jdGlvbigpe3JldHVybiBtfSkpO2NvbnN0IGE9Yy5iaW5kKG51bGwsXCJhZGRFdmVudExpc3RlbmVyXCIpLGw9Yy5iaW5kKG51bGwsXCJyZW1vdmVFdmVudExpc3RlbmVyXCIpO2Z1bmN0aW9uIHAodCl7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBlLmlubmVySFRNTD10LnRyaW0oKSxlLmZpcnN0RWxlbWVudENoaWxkfWZ1bmN0aW9uIHUodCxlKXtjb25zdCBvPXQuZ2V0QXR0cmlidXRlKGUpO3JldHVybiB0LnJlbW92ZUF0dHJpYnV0ZShlKSxvfWZ1bmN0aW9uIGgodCl7cmV0dXJuIGZ1bmN0aW9uIHQoZSxvPXt9KXtjb25zdCBuPXUoZSxcIjpvYmpcIiksaT11KGUsXCI6cmVmXCIpLHI9bj9vW25dPXt9Om87aSYmKG9baV09ZSk7Zm9yKGNvbnN0IG8gb2YgQXJyYXkuZnJvbShlLmNoaWxkcmVuKSl7Y29uc3QgZT11KG8sXCI6YXJyXCIpLG49dChvLGU/e306cik7ZSYmKHJbZV18fChyW2VdPVtdKSkucHVzaChPYmplY3Qua2V5cyhuKS5sZW5ndGg/bjpvKX1yZXR1cm4gb30ocCh0KSl9ZnVuY3Rpb24gZCh0KXtsZXQgZT10LnBhdGh8fHQuY29tcG9zZWRQYXRoJiZ0LmNvbXBvc2VkUGF0aCgpO2lmKGUpcmV0dXJuIGU7bGV0IG89dC50YXJnZXQucGFyZW50RWxlbWVudDtmb3IoZT1bdC50YXJnZXQsb107bz1vLnBhcmVudEVsZW1lbnQ7KWUucHVzaChvKTtyZXR1cm4gZS5wdXNoKGRvY3VtZW50LHdpbmRvdyksZX1mdW5jdGlvbiBmKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRWxlbWVudD90Olwic3RyaW5nXCI9PXR5cGVvZiB0P3Quc3BsaXQoLz4+L2cpLnJlZHVjZSgodCxlLG8sbik9Pih0PXQucXVlcnlTZWxlY3RvcihlKSxvPG4ubGVuZ3RoLTE/dC5zaGFkb3dSb290OnQpLGRvY3VtZW50KTpudWxsfWZ1bmN0aW9uIG0odCxlPSh0PT50KSl7ZnVuY3Rpb24gbyhvKXtjb25zdCBuPVsuMDAxLC4wMSwuMV1bTnVtYmVyKG8uc2hpZnRLZXl8fDIqby5jdHJsS2V5KV0qKG8uZGVsdGFZPDA/MTotMSk7bGV0IGk9MCxyPXQuc2VsZWN0aW9uU3RhcnQ7dC52YWx1ZT10LnZhbHVlLnJlcGxhY2UoL1tcXGQuXSsvZywodCxvKT0+bzw9ciYmbyt0Lmxlbmd0aD49cj8ocj1vLGUoTnVtYmVyKHQpLG4saSkpOihpKyssdCkpLHQuZm9jdXMoKSx0LnNldFNlbGVjdGlvblJhbmdlKHIsciksby5wcmV2ZW50RGVmYXVsdCgpLHQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiKSl9YSh0LFwiZm9jdXNcIiwoKT0+YSh3aW5kb3csXCJ3aGVlbFwiLG8se3Bhc3NpdmU6ITF9KSksYSh0LFwiYmx1clwiLCgpPT5sKHdpbmRvdyxcIndoZWVsXCIsbykpfXZhciB2PW8oMCk7Y29uc3R7bWluOmIsbWF4OnksZmxvb3I6Zyxyb3VuZDpffT1NYXRoO2Z1bmN0aW9uIHcodCxlLG8pe2UvPTEwMCxvLz0xMDA7Y29uc3Qgbj1nKHQ9dC8zNjAqNiksaT10LW4scj1vKigxLWUpLHM9byooMS1pKmUpLGM9byooMS0oMS1pKSplKSxhPW4lNjtyZXR1cm5bMjU1KltvLHMscixyLGMsb11bYV0sMjU1KltjLG8sbyxzLHIscl1bYV0sMjU1KltyLHIsYyxvLG8sc11bYV1dfWZ1bmN0aW9uIEEodCxlLG8pe2NvbnN0IG49KDItKGUvPTEwMCkpKihvLz0xMDApLzI7cmV0dXJuIDAhPT1uJiYoZT0xPT09bj8wOm48LjU/ZSpvLygyKm4pOmUqby8oMi0yKm4pKSxbdCwxMDAqZSwxMDAqbl19ZnVuY3Rpb24gQyh0LGUsbyl7Y29uc3Qgbj1iKHQvPTI1NSxlLz0yNTUsby89MjU1KSxpPXkodCxlLG8pLHI9aS1uO2xldCBzLGM7aWYoMD09PXIpcz1jPTA7ZWxzZXtjPXIvaTtjb25zdCBuPSgoaS10KS82K3IvMikvcixhPSgoaS1lKS82K3IvMikvcixsPSgoaS1vKS82K3IvMikvcjt0PT09aT9zPWwtYTplPT09aT9zPTEvMytuLWw6bz09PWkmJihzPTIvMythLW4pLHM8MD9zKz0xOnM+MSYmKHMtPTEpfXJldHVyblszNjAqcywxMDAqYywxMDAqaV19ZnVuY3Rpb24gayh0LGUsbyxuKXtyZXR1cm4gZS89MTAwLG8vPTEwMCxbLi4uQygyNTUqKDEtYigxLCh0Lz0xMDApKigxLShuLz0xMDApKStuKSksMjU1KigxLWIoMSxlKigxLW4pK24pKSwyNTUqKDEtYigxLG8qKDEtbikrbikpKV19ZnVuY3Rpb24gUyh0LGUsbyl7cmV0dXJuIGUvPTEwMCxbdCwyKihlKj0oby89MTAwKTwuNT9vOjEtbykvKG8rZSkqMTAwLDEwMCoobytlKV19ZnVuY3Rpb24gTyh0KXtyZXR1cm4gQyguLi50Lm1hdGNoKC8uezJ9L2cpLm1hcCh0PT5wYXJzZUludCh0LDE2KSkpfWZ1bmN0aW9uIGoodCl7dD10Lm1hdGNoKC9eW2EtekEtWl0rJC8pP2Z1bmN0aW9uKHQpe2lmKFwiYmxhY2tcIj09PXQudG9Mb3dlckNhc2UoKSlyZXR1cm5cIiMwMDBcIjtjb25zdCBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpO3JldHVybiBlLmZpbGxTdHlsZT10LFwiIzAwMFwiPT09ZS5maWxsU3R5bGU/bnVsbDplLmZpbGxTdHlsZX0odCk6dDtjb25zdCBlPXtjbXlrOi9eY215a1tcXERdKyhbXFxkLl0rKVtcXERdKyhbXFxkLl0rKVtcXERdKyhbXFxkLl0rKVtcXERdKyhbXFxkLl0rKS9pLHJnYmE6L14oKHJnYmEpfHJnYilbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSo/KFtcXGQuXSt8JCkvaSxoc2xhOi9eKChoc2xhKXxoc2wpW1xcRF0rKFtcXGQuXSspW1xcRF0rKFtcXGQuXSspW1xcRF0rKFtcXGQuXSspW1xcRF0qPyhbXFxkLl0rfCQpL2ksaHN2YTovXigoaHN2YSl8aHN2KVtcXERdKyhbXFxkLl0rKVtcXERdKyhbXFxkLl0rKVtcXERdKyhbXFxkLl0rKVtcXERdKj8oW1xcZC5dK3wkKS9pLGhleGE6L14jPygoW1xcZEEtRmEtZl17Myw0fSl8KFtcXGRBLUZhLWZdezZ9KXwoW1xcZEEtRmEtZl17OH0pKSQvaX0sbz10PT50Lm1hcCh0PT4vXih8XFxkKylcXC5cXGQrfFxcZCskLy50ZXN0KHQpP051bWJlcih0KTp2b2lkIDApO2xldCBuO3Q6Zm9yKGNvbnN0IGkgaW4gZSl7aWYoIShuPWVbaV0uZXhlYyh0KSkpY29udGludWU7Y29uc3Qgcj10PT4hIW5bMl09PShcIm51bWJlclwiPT10eXBlb2YgdCk7c3dpdGNoKGkpe2Nhc2VcImNteWtcIjp7Y29uc3RbLHQsZSxyLHNdPW8obik7aWYodD4xMDB8fGU+MTAwfHxyPjEwMHx8cz4xMDApYnJlYWsgdDtyZXR1cm57dmFsdWVzOmsodCxlLHIscyksdHlwZTppfX1jYXNlXCJyZ2JhXCI6e2NvbnN0WywsLHQsZSxzLGNdPW8obik7aWYodD4yNTV8fGU+MjU1fHxzPjI1NXx8YzwwfHxjPjF8fCFyKGMpKWJyZWFrIHQ7cmV0dXJue3ZhbHVlczpbLi4uQyh0LGUscyksY10sYTpjLHR5cGU6aX19Y2FzZVwiaGV4YVwiOntsZXRbLHRdPW47NCE9PXQubGVuZ3RoJiYzIT09dC5sZW5ndGh8fCh0PXQuc3BsaXQoXCJcIikubWFwKHQ9PnQrdCkuam9pbihcIlwiKSk7Y29uc3QgZT10LnN1YnN0cmluZygwLDYpO2xldCBvPXQuc3Vic3RyaW5nKDYpO3JldHVybiBvPW8/cGFyc2VJbnQobywxNikvMjU1OnZvaWQgMCx7dmFsdWVzOlsuLi5PKGUpLG9dLGE6byx0eXBlOml9fWNhc2VcImhzbGFcIjp7Y29uc3RbLCwsdCxlLHMsY109byhuKTtpZih0PjM2MHx8ZT4xMDB8fHM+MTAwfHxjPDB8fGM+MXx8IXIoYykpYnJlYWsgdDtyZXR1cm57dmFsdWVzOlsuLi5TKHQsZSxzKSxjXSxhOmMsdHlwZTppfX1jYXNlXCJoc3ZhXCI6e2NvbnN0WywsLHQsZSxzLGNdPW8obik7aWYodD4zNjB8fGU+MTAwfHxzPjEwMHx8YzwwfHxjPjF8fCFyKGMpKWJyZWFrIHQ7cmV0dXJue3ZhbHVlczpbdCxlLHMsY10sYTpjLHR5cGU6aX19fX1yZXR1cm57dmFsdWVzOm51bGwsdHlwZTpudWxsfX1mdW5jdGlvbiB4KHQ9MCxlPTAsbz0wLG49MSl7Y29uc3QgaT0odCxlKT0+KG89LTEpPT5lKH5vP3QubWFwKHQ9Pk51bWJlcih0LnRvRml4ZWQobykpKTp0KSxyPXtoOnQsczplLHY6byxhOm4sdG9IU1ZBKCl7Y29uc3QgdD1bci5oLHIucyxyLnYsci5hXTtyZXR1cm4gdC50b1N0cmluZz1pKHQsdD0+XCJoc3ZhKFwiLmNvbmNhdCh0WzBdLFwiLCBcIikuY29uY2F0KHRbMV0sXCIlLCBcIikuY29uY2F0KHRbMl0sXCIlLCBcIikuY29uY2F0KHIuYSxcIilcIikpLHR9LHRvSFNMQSgpe2NvbnN0IHQ9Wy4uLkEoci5oLHIucyxyLnYpLHIuYV07cmV0dXJuIHQudG9TdHJpbmc9aSh0LHQ9PlwiaHNsYShcIi5jb25jYXQodFswXSxcIiwgXCIpLmNvbmNhdCh0WzFdLFwiJSwgXCIpLmNvbmNhdCh0WzJdLFwiJSwgXCIpLmNvbmNhdChyLmEsXCIpXCIpKSx0fSx0b1JHQkEoKXtjb25zdCB0PVsuLi53KHIuaCxyLnMsci52KSxyLmFdO3JldHVybiB0LnRvU3RyaW5nPWkodCx0PT5cInJnYmEoXCIuY29uY2F0KHRbMF0sXCIsIFwiKS5jb25jYXQodFsxXSxcIiwgXCIpLmNvbmNhdCh0WzJdLFwiLCBcIikuY29uY2F0KHIuYSxcIilcIikpLHR9LHRvQ01ZSygpe2NvbnN0IHQ9ZnVuY3Rpb24odCxlLG8pe2NvbnN0IG49dyh0LGUsbyksaT1uWzBdLzI1NSxyPW5bMV0vMjU1LHM9blsyXS8yNTUsYz1iKDEtaSwxLXIsMS1zKTtyZXR1cm5bMTAwKigxPT09Yz8wOigxLWktYykvKDEtYykpLDEwMCooMT09PWM/MDooMS1yLWMpLygxLWMpKSwxMDAqKDE9PT1jPzA6KDEtcy1jKS8oMS1jKSksMTAwKmNdfShyLmgsci5zLHIudik7cmV0dXJuIHQudG9TdHJpbmc9aSh0LHQ9PlwiY215ayhcIi5jb25jYXQodFswXSxcIiUsIFwiKS5jb25jYXQodFsxXSxcIiUsIFwiKS5jb25jYXQodFsyXSxcIiUsIFwiKS5jb25jYXQodFszXSxcIiUpXCIpKSx0fSx0b0hFWEEoKXtjb25zdCB0PWZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gdyh0LGUsbykubWFwKHQ9Pl8odCkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsXCIwXCIpKX0oci5oLHIucyxyLnYpLGU9ci5hPj0xP1wiXCI6TnVtYmVyKCgyNTUqci5hKS50b0ZpeGVkKDApKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKS5wYWRTdGFydCgyLFwiMFwiKTtyZXR1cm4gZSYmdC5wdXNoKGUpLHQudG9TdHJpbmc9KCk9PlwiI1wiLmNvbmNhdCh0LmpvaW4oXCJcIikudG9VcHBlckNhc2UoKSksdH0sY2xvbmU6KCk9Pngoci5oLHIucyxyLnYsci5hKX07cmV0dXJuIHJ9Y29uc3QgRT10PT5NYXRoLm1heChNYXRoLm1pbih0LDEpLDApO2Z1bmN0aW9uIEwodCl7Y29uc3QgZT17b3B0aW9uczpPYmplY3QuYXNzaWduKHtsb2NrOm51bGwsb25jaGFuZ2U6KCk9PjAsb25zdG9wOigpPT4wfSx0KSxfa2V5Ym9hcmQodCl7Y29uc3R7b3B0aW9uczpvfT1lLHt0eXBlOm4sa2V5Oml9PXQ7aWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PW8ud3JhcHBlcil7Y29uc3R7bG9jazpvfT1lLm9wdGlvbnMscj1cIkFycm93VXBcIj09PWkscz1cIkFycm93UmlnaHRcIj09PWksYz1cIkFycm93RG93blwiPT09aSxhPVwiQXJyb3dMZWZ0XCI9PT1pO2lmKFwia2V5ZG93blwiPT09biYmKHJ8fHN8fGN8fGEpKXtsZXQgbj0wLGk9MDtcInZcIj09PW8/bj1yfHxzPzE6LTE6XCJoXCI9PT1vP249cnx8cz8tMToxOihpPXI/LTE6Yz8xOjAsbj1hPy0xOnM/MTowKSxlLnVwZGF0ZShFKGUuY2FjaGUueCsuMDEqbiksRShlLmNhY2hlLnkrLjAxKmkpKSx0LnByZXZlbnREZWZhdWx0KCl9ZWxzZSBpLnN0YXJ0c1dpdGgoXCJBcnJvd1wiKSYmKGUub3B0aW9ucy5vbnN0b3AoKSx0LnByZXZlbnREZWZhdWx0KCkpfX0sX3RhcHN0YXJ0KHQpe2EoZG9jdW1lbnQsW1wibW91c2V1cFwiLFwidG91Y2hlbmRcIixcInRvdWNoY2FuY2VsXCJdLGUuX3RhcHN0b3ApLGEoZG9jdW1lbnQsW1wibW91c2Vtb3ZlXCIsXCJ0b3VjaG1vdmVcIl0sZS5fdGFwbW92ZSksdC5wcmV2ZW50RGVmYXVsdCgpLGUuX3RhcG1vdmUodCl9LF90YXBtb3ZlKHQpe2NvbnN0e29wdGlvbnM6byxjYWNoZTpufT1lLHtsb2NrOmksZWxlbWVudDpyLHdyYXBwZXI6c309byxjPXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bGV0IGE9MCxsPTA7aWYodCl7Y29uc3QgZT10JiZ0LnRvdWNoZXMmJnQudG91Y2hlc1swXTthPXQ/KGV8fHQpLmNsaWVudFg6MCxsPXQ/KGV8fHQpLmNsaWVudFk6MCxhPGMubGVmdD9hPWMubGVmdDphPmMubGVmdCtjLndpZHRoJiYoYT1jLmxlZnQrYy53aWR0aCksbDxjLnRvcD9sPWMudG9wOmw+Yy50b3ArYy5oZWlnaHQmJihsPWMudG9wK2MuaGVpZ2h0KSxhLT1jLmxlZnQsbC09Yy50b3B9ZWxzZSBuJiYoYT1uLngqYy53aWR0aCxsPW4ueSpjLmhlaWdodCk7XCJoXCIhPT1pJiYoci5zdHlsZS5sZWZ0PVwiY2FsYyhcIi5jb25jYXQoYS9jLndpZHRoKjEwMCxcIiUgLSBcIikuY29uY2F0KHIub2Zmc2V0V2lkdGgvMixcInB4KVwiKSksXCJ2XCIhPT1pJiYoci5zdHlsZS50b3A9XCJjYWxjKFwiLmNvbmNhdChsL2MuaGVpZ2h0KjEwMCxcIiUgLSBcIikuY29uY2F0KHIub2Zmc2V0SGVpZ2h0LzIsXCJweClcIikpLGUuY2FjaGU9e3g6YS9jLndpZHRoLHk6bC9jLmhlaWdodH07Y29uc3QgcD1FKGEvYy53aWR0aCksdT1FKGwvYy5oZWlnaHQpO3N3aXRjaChpKXtjYXNlXCJ2XCI6cmV0dXJuIG8ub25jaGFuZ2UocCk7Y2FzZVwiaFwiOnJldHVybiBvLm9uY2hhbmdlKHUpO2RlZmF1bHQ6cmV0dXJuIG8ub25jaGFuZ2UocCx1KX19LF90YXBzdG9wKCl7ZS5vcHRpb25zLm9uc3RvcCgpLGwoZG9jdW1lbnQsW1wibW91c2V1cFwiLFwidG91Y2hlbmRcIixcInRvdWNoY2FuY2VsXCJdLGUuX3RhcHN0b3ApLGwoZG9jdW1lbnQsW1wibW91c2Vtb3ZlXCIsXCJ0b3VjaG1vdmVcIl0sZS5fdGFwbW92ZSl9LHRyaWdnZXIoKXtlLl90YXBtb3ZlKCl9LHVwZGF0ZSh0PTAsbz0wKXtjb25zdHtsZWZ0Om4sdG9wOmksd2lkdGg6cixoZWlnaHQ6c309ZS5vcHRpb25zLndyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XCJoXCI9PT1lLm9wdGlvbnMubG9jayYmKG89dCksZS5fdGFwbW92ZSh7Y2xpZW50WDpuK3IqdCxjbGllbnRZOmkrcypvfSl9LGRlc3Ryb3koKXtjb25zdHtvcHRpb25zOnQsX3RhcHN0YXJ0Om8sX2tleWJvYXJkOm59PWU7bChkb2N1bWVudCxbXCJrZXlkb3duXCIsXCJrZXl1cFwiXSxuKSxsKFt0LndyYXBwZXIsdC5lbGVtZW50XSxcIm1vdXNlZG93blwiLG8pLGwoW3Qud3JhcHBlcix0LmVsZW1lbnRdLFwidG91Y2hzdGFydFwiLG8se3Bhc3NpdmU6ITF9KX19LHtvcHRpb25zOm8sX3RhcHN0YXJ0Om4sX2tleWJvYXJkOml9PWU7cmV0dXJuIGEoW28ud3JhcHBlcixvLmVsZW1lbnRdLFwibW91c2Vkb3duXCIsbiksYShbby53cmFwcGVyLG8uZWxlbWVudF0sXCJ0b3VjaHN0YXJ0XCIsbix7cGFzc2l2ZTohMX0pLGEoZG9jdW1lbnQsW1wia2V5ZG93blwiLFwia2V5dXBcIl0saSksZX1mdW5jdGlvbiBQKHQ9e30pe3Q9T2JqZWN0LmFzc2lnbih7b25jaGFuZ2U6KCk9PjAsY2xhc3NOYW1lOlwiXCIsZWxlbWVudHM6W119LHQpO2NvbnN0IGU9YSh0LmVsZW1lbnRzLFwiY2xpY2tcIixlPT57dC5lbGVtZW50cy5mb3JFYWNoKG89Pm8uY2xhc3NMaXN0W2UudGFyZ2V0PT09bz9cImFkZFwiOlwicmVtb3ZlXCJdKHQuY2xhc3NOYW1lKSksdC5vbmNoYW5nZShlKX0pO3JldHVybntkZXN0cm95OigpPT5sKC4uLmUpfX1mdW5jdGlvbiBCKHtlbDp0LHJlZmVyZW5jZTplLHBhZGRpbmc6bz04fSl7Y29uc3Qgbj17c3RhcnQ6XCJzbWVcIixtaWRkbGU6XCJtc2VcIixlbmQ6XCJlbXNcIn0saT17dG9wOlwidGJybFwiLHJpZ2h0Olwicmx0YlwiLGJvdHRvbTpcImJ0cmxcIixsZWZ0OlwibHJidFwifSxyPSgodD17fSk9PihlLG89dFtlXSk9PntpZihvKXJldHVybiBvO2NvbnN0W24saT1cIm1pZGRsZVwiXT1lLnNwbGl0KFwiLVwiKSxyPVwidG9wXCI9PT1ufHxcImJvdHRvbVwiPT09bjtyZXR1cm4gdFtlXT17cG9zaXRpb246bix2YXJpYW50OmksaXNWZXJ0aWNhbDpyfX0pKCk7cmV0dXJue3VwZGF0ZShzLGM9ITEpe2NvbnN0e3Bvc2l0aW9uOmEsdmFyaWFudDpsLGlzVmVydGljYWw6cH09cihzKSx1PWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaD10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGQ9dD0+dD97dDp1LnRvcC1oLmhlaWdodC1vLGI6dS5ib3R0b20rb306e3I6dS5yaWdodCtvLGw6dS5sZWZ0LWgud2lkdGgtb30sZj10PT50P3tzOnUubGVmdCt1LndpZHRoLWgud2lkdGgsbTotaC53aWR0aC8yKyh1LmxlZnQrdS53aWR0aC8yKSxlOnUubGVmdH06e3M6dS5ib3R0b20taC5oZWlnaHQsbTp1LmJvdHRvbS11LmhlaWdodC8yLWguaGVpZ2h0LzIsZTp1LmJvdHRvbS11LmhlaWdodH0sbT17fSx2PSh0LGUsbyk9Pntjb25zdCBuPVwidG9wXCI9PT1vLGk9bj9oLmhlaWdodDpoLndpZHRoLHI9d2luZG93W24/XCJpbm5lckhlaWdodFwiOlwiaW5uZXJXaWR0aFwiXTtmb3IoY29uc3QgbiBvZiB0KXtjb25zdCB0PWVbbl0scz1tW29dPVwiXCIuY29uY2F0KHQsXCJweFwiKTtpZih0PjAmJnQraTxyKXJldHVybiBzfXJldHVybiBudWxsfTtmb3IoY29uc3QgZSBvZltwLCFwXSl7Y29uc3Qgbz1lP1widG9wXCI6XCJsZWZ0XCIscj1lP1wibGVmdFwiOlwidG9wXCIscz12KGlbYV0sZChlKSxvKSxjPXYobltsXSxmKGUpLHIpO2lmKHMmJmMpcmV0dXJuIHQuc3R5bGVbcl09Yyx2b2lkKHQuc3R5bGVbb109cyl9Yz8odC5zdHlsZS50b3A9XCJcIi5jb25jYXQoKHdpbmRvdy5pbm5lckhlaWdodC1oLmhlaWdodCkvMixcInB4XCIpLHQuc3R5bGUubGVmdD1cIlwiLmNvbmNhdCgod2luZG93LmlubmVyV2lkdGgtaC53aWR0aCkvMixcInB4XCIpKToodC5zdHlsZS5sZWZ0PW0ubGVmdCx0LnN0eWxlLnRvcD1tLnRvcCl9fX1mdW5jdGlvbiBIKHQsZSxvKXtyZXR1cm4gZSBpbiB0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOm8sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPW8sdH1jbGFzcyBSe2NvbnN0cnVjdG9yKHQpe0godGhpcyxcIl9pbml0aWFsaXppbmdBY3RpdmVcIiwhMCksSCh0aGlzLFwiX3JlY2FsY1wiLCEwKSxIKHRoaXMsXCJfbmFub3BvcFwiLG51bGwpLEgodGhpcyxcIl9yb290XCIsbnVsbCksSCh0aGlzLFwiX2NvbG9yXCIseCgpKSxIKHRoaXMsXCJfbGFzdENvbG9yXCIseCgpKSxIKHRoaXMsXCJfc3dhdGNoQ29sb3JzXCIsW10pLEgodGhpcyxcIl9ldmVudExpc3RlbmVyXCIse2luaXQ6W10sc2F2ZTpbXSxoaWRlOltdLHNob3c6W10sY2xlYXI6W10sY2hhbmdlOltdLGNoYW5nZXN0b3A6W10sY2FuY2VsOltdLHN3YXRjaHNlbGVjdDpbXX0pLHRoaXMub3B0aW9ucz10PU9iamVjdC5hc3NpZ24oe2FwcENsYXNzOm51bGwsdGhlbWU6XCJjbGFzc2ljXCIsdXNlQXNCdXR0b246ITEscGFkZGluZzo4LGRpc2FibGVkOiExLGNvbXBhcmlzb246ITAsY2xvc2VPblNjcm9sbDohMSxvdXRwdXRQcmVjaXNpb246MCxsb2NrT3BhY2l0eTohMSxhdXRvUmVwb3NpdGlvbjohMCxjb250YWluZXI6XCJib2R5XCIsY29tcG9uZW50czp7aW50ZXJhY3Rpb246e319LHN0cmluZ3M6e30sc3dhdGNoZXM6bnVsbCxpbmxpbmU6ITEsc2xpZGVyczpudWxsLGRlZmF1bHQ6XCIjNDI0NDVhXCIsZGVmYXVsdFJlcHJlc2VudGF0aW9uOm51bGwscG9zaXRpb246XCJib3R0b20tbWlkZGxlXCIsYWRqdXN0YWJsZU51bWJlcnM6ITAsc2hvd0Fsd2F5czohMSxjbG9zZVdpdGhLZXk6XCJFc2NhcGVcIn0sdCk7Y29uc3R7c3dhdGNoZXM6ZSxjb21wb25lbnRzOm8sdGhlbWU6bixzbGlkZXJzOmksbG9ja09wYWNpdHk6cixwYWRkaW5nOnN9PXQ7W1wibmFub1wiLFwibW9ub2xpdGhcIl0uaW5jbHVkZXMobikmJiFpJiYodC5zbGlkZXJzPVwiaFwiKSxvLmludGVyYWN0aW9ufHwoby5pbnRlcmFjdGlvbj17fSk7Y29uc3R7cHJldmlldzpjLG9wYWNpdHk6YSxodWU6bCxwYWxldHRlOnB9PW87by5vcGFjaXR5PSFyJiZhLG8ucGFsZXR0ZT1wfHxjfHxhfHxsLHRoaXMuX3ByZUJ1aWxkKCksdGhpcy5fYnVpbGRDb21wb25lbnRzKCksdGhpcy5fYmluZEV2ZW50cygpLHRoaXMuX2ZpbmFsQnVpbGQoKSxlJiZlLmxlbmd0aCYmZS5mb3JFYWNoKHQ9PnRoaXMuYWRkU3dhdGNoKHQpKTtjb25zdHtidXR0b246dSxhcHA6aH09dGhpcy5fcm9vdDt0aGlzLl9uYW5vcG9wPUIoe3JlZmVyZW5jZTp1LHBhZGRpbmc6cyxlbDpofSksdS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJidXR0b25cIiksdS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsXCJ0b2dnbGUgY29sb3IgcGlja2VyIGRpYWxvZ1wiKTtjb25zdCBkPXRoaXM7cmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbiBlKCl7aWYoIWgub2Zmc2V0V2lkdGgmJmgucGFyZW50RWxlbWVudCE9PXQuY29udGFpbmVyKXJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSk7ZC5zZXRDb2xvcih0LmRlZmF1bHQpLGQuX3JlUG9zaXRpb25pbmdQaWNrZXIoKSx0LmRlZmF1bHRSZXByZXNlbnRhdGlvbiYmKGQuX3JlcHJlc2VudGF0aW9uPXQuZGVmYXVsdFJlcHJlc2VudGF0aW9uLGQuc2V0Q29sb3JSZXByZXNlbnRhdGlvbihkLl9yZXByZXNlbnRhdGlvbikpLHQuc2hvd0Fsd2F5cyYmZC5zaG93KCksZC5faW5pdGlhbGl6aW5nQWN0aXZlPSExLGQuX2VtaXQoXCJpbml0XCIpfSkpfV9wcmVCdWlsZCgpe2NvbnN0IHQ9dGhpcy5vcHRpb25zO2Zvcihjb25zdCBlIG9mW1wiZWxcIixcImNvbnRhaW5lclwiXSl0W2VdPWYodFtlXSk7dGhpcy5fcm9vdD0oKHtjb21wb25lbnRzOnQsc3RyaW5nczplLHVzZUFzQnV0dG9uOm8saW5saW5lOm4sYXBwQ2xhc3M6aSx0aGVtZTpyLGxvY2tPcGFjaXR5OnN9KT0+e2NvbnN0IGM9dD0+dD9cIlwiOidzdHlsZT1cImRpc3BsYXk6bm9uZVwiIGhpZGRlbicsYT1oKCdcXG4gICAgICA8ZGl2IDpyZWY9XCJyb290XCIgY2xhc3M9XCJwaWNrclwiPlxcblxcbiAgICAgICAgJy5jb25jYXQobz9cIlwiOic8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6cmVmPVwiYnV0dG9uXCIgY2xhc3M9XCJwY3ItYnV0dG9uXCI+PC9idXR0b24+JywnXFxuXFxuICAgICAgICA8ZGl2IDpyZWY9XCJhcHBcIiBjbGFzcz1cInBjci1hcHAgJykuY29uY2F0KGl8fFwiXCIsJ1wiIGRhdGEtdGhlbWU9XCInKS5jb25jYXQociwnXCIgJykuY29uY2F0KG4/J3N0eWxlPVwicG9zaXRpb246IHVuc2V0XCInOlwiXCIsJyBhcmlhLWxhYmVsPVwiY29sb3IgcGlja2VyIGRpYWxvZ1wiIHJvbGU9XCJmb3JtXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwY3Itc2VsZWN0aW9uXCIgJykuY29uY2F0KGModC5wYWxldHRlKSwnPlxcbiAgICAgICAgICAgIDxkaXYgOm9iaj1cInByZXZpZXdcIiBjbGFzcz1cInBjci1jb2xvci1wcmV2aWV3XCIgJykuY29uY2F0KGModC5wcmV2aWV3KSwnPlxcbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOnJlZj1cImxhc3RDb2xvclwiIGNsYXNzPVwicGNyLWxhc3QtY29sb3JcIiBhcmlhLWxhYmVsPVwidXNlIHByZXZpb3VzIGNvbG9yXCI+PC9idXR0b24+XFxuICAgICAgICAgICAgICA8ZGl2IDpyZWY9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cInBjci1jdXJyZW50LWNvbG9yXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPGRpdiA6b2JqPVwicGFsZXR0ZVwiIGNsYXNzPVwicGNyLWNvbG9yLXBhbGV0dGVcIj5cXG4gICAgICAgICAgICAgIDxkaXYgOnJlZj1cInBpY2tlclwiIGNsYXNzPVwicGNyLXBpY2tlclwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgPGRpdiA6cmVmPVwicGFsZXR0ZVwiIGNsYXNzPVwicGNyLXBhbGV0dGVcIiB0YWJpbmRleD1cIjBcIiBhcmlhLWxhYmVsPVwiY29sb3Igc2VsZWN0aW9uIGFyZWFcIiByb2xlPVwibGlzdGJveFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgOm9iaj1cImh1ZVwiIGNsYXNzPVwicGNyLWNvbG9yLWNob29zZXJcIiAnKS5jb25jYXQoYyh0Lmh1ZSksJz5cXG4gICAgICAgICAgICAgIDxkaXYgOnJlZj1cInBpY2tlclwiIGNsYXNzPVwicGNyLXBpY2tlclwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgPGRpdiA6cmVmPVwic2xpZGVyXCIgY2xhc3M9XCJwY3ItaHVlIHBjci1zbGlkZXJcIiB0YWJpbmRleD1cIjBcIiBhcmlhLWxhYmVsPVwiaHVlIHNlbGVjdGlvbiBzbGlkZXJcIiByb2xlPVwic2xpZGVyXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgPGRpdiA6b2JqPVwib3BhY2l0eVwiIGNsYXNzPVwicGNyLWNvbG9yLW9wYWNpdHlcIiAnKS5jb25jYXQoYyh0Lm9wYWNpdHkpLCc+XFxuICAgICAgICAgICAgICA8ZGl2IDpyZWY9XCJwaWNrZXJcIiBjbGFzcz1cInBjci1waWNrZXJcIj48L2Rpdj5cXG4gICAgICAgICAgICAgIDxkaXYgOnJlZj1cInNsaWRlclwiIGNsYXNzPVwicGNyLW9wYWNpdHkgcGNyLXNsaWRlclwiIHRhYmluZGV4PVwiMFwiIGFyaWEtbGFiZWw9XCJvcGFjaXR5IHNlbGVjdGlvbiBzbGlkZXJcIiByb2xlPVwic2xpZGVyXCI+PC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicGNyLXN3YXRjaGVzICcpLmNvbmNhdCh0LnBhbGV0dGU/XCJcIjpcInBjci1sYXN0XCIsJ1wiIDpyZWY9XCJzd2F0Y2hlc1wiPjwvZGl2PiBcXG5cXG4gICAgICAgICAgPGRpdiA6b2JqPVwiaW50ZXJhY3Rpb25cIiBjbGFzcz1cInBjci1pbnRlcmFjdGlvblwiICcpLmNvbmNhdChjKE9iamVjdC5rZXlzKHQuaW50ZXJhY3Rpb24pLmxlbmd0aCksJz5cXG4gICAgICAgICAgICA8aW5wdXQgOnJlZj1cInJlc3VsdFwiIGNsYXNzPVwicGNyLXJlc3VsdFwiIHR5cGU9XCJ0ZXh0XCIgc3BlbGxjaGVjaz1cImZhbHNlXCIgJykuY29uY2F0KGModC5pbnRlcmFjdGlvbi5pbnB1dCksJz5cXG5cXG4gICAgICAgICAgICA8aW5wdXQgOmFycj1cIm9wdGlvbnNcIiBjbGFzcz1cInBjci10eXBlXCIgZGF0YS10eXBlPVwiSEVYQVwiIHZhbHVlPVwiJykuY29uY2F0KHM/XCJIRVhcIjpcIkhFWEFcIiwnXCIgdHlwZT1cImJ1dHRvblwiICcpLmNvbmNhdChjKHQuaW50ZXJhY3Rpb24uaGV4KSwnPlxcbiAgICAgICAgICAgIDxpbnB1dCA6YXJyPVwib3B0aW9uc1wiIGNsYXNzPVwicGNyLXR5cGVcIiBkYXRhLXR5cGU9XCJSR0JBXCIgdmFsdWU9XCInKS5jb25jYXQocz9cIlJHQlwiOlwiUkdCQVwiLCdcIiB0eXBlPVwiYnV0dG9uXCIgJykuY29uY2F0KGModC5pbnRlcmFjdGlvbi5yZ2JhKSwnPlxcbiAgICAgICAgICAgIDxpbnB1dCA6YXJyPVwib3B0aW9uc1wiIGNsYXNzPVwicGNyLXR5cGVcIiBkYXRhLXR5cGU9XCJIU0xBXCIgdmFsdWU9XCInKS5jb25jYXQocz9cIkhTTFwiOlwiSFNMQVwiLCdcIiB0eXBlPVwiYnV0dG9uXCIgJykuY29uY2F0KGModC5pbnRlcmFjdGlvbi5oc2xhKSwnPlxcbiAgICAgICAgICAgIDxpbnB1dCA6YXJyPVwib3B0aW9uc1wiIGNsYXNzPVwicGNyLXR5cGVcIiBkYXRhLXR5cGU9XCJIU1ZBXCIgdmFsdWU9XCInKS5jb25jYXQocz9cIkhTVlwiOlwiSFNWQVwiLCdcIiB0eXBlPVwiYnV0dG9uXCIgJykuY29uY2F0KGModC5pbnRlcmFjdGlvbi5oc3ZhKSwnPlxcbiAgICAgICAgICAgIDxpbnB1dCA6YXJyPVwib3B0aW9uc1wiIGNsYXNzPVwicGNyLXR5cGVcIiBkYXRhLXR5cGU9XCJDTVlLXCIgdmFsdWU9XCJDTVlLXCIgdHlwZT1cImJ1dHRvblwiICcpLmNvbmNhdChjKHQuaW50ZXJhY3Rpb24uY215ayksJz5cXG5cXG4gICAgICAgICAgICA8aW5wdXQgOnJlZj1cInNhdmVcIiBjbGFzcz1cInBjci1zYXZlXCIgdmFsdWU9XCInKS5jb25jYXQoZS5zYXZlfHxcIlNhdmVcIiwnXCIgdHlwZT1cImJ1dHRvblwiICcpLmNvbmNhdChjKHQuaW50ZXJhY3Rpb24uc2F2ZSksJyBhcmlhLWxhYmVsPVwic2F2ZSBhbmQgZXhpdFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCA6cmVmPVwiY2FuY2VsXCIgY2xhc3M9XCJwY3ItY2FuY2VsXCIgdmFsdWU9XCInKS5jb25jYXQoZS5jYW5jZWx8fFwiQ2FuY2VsXCIsJ1wiIHR5cGU9XCJidXR0b25cIiAnKS5jb25jYXQoYyh0LmludGVyYWN0aW9uLmNhbmNlbCksJyBhcmlhLWxhYmVsPVwiY2FuY2VsIGFuZCBleGl0XCI+XFxuICAgICAgICAgICAgPGlucHV0IDpyZWY9XCJjbGVhclwiIGNsYXNzPVwicGNyLWNsZWFyXCIgdmFsdWU9XCInKS5jb25jYXQoZS5jbGVhcnx8XCJDbGVhclwiLCdcIiB0eXBlPVwiYnV0dG9uXCIgJykuY29uY2F0KGModC5pbnRlcmFjdGlvbi5jbGVhciksJyBhcmlhLWxhYmVsPVwiY2xlYXIgYW5kIGV4aXRcIj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgJykpLGw9YS5pbnRlcmFjdGlvbjtyZXR1cm4gbC5vcHRpb25zLmZpbmQodD0+IXQuaGlkZGVuJiYhdC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpKSxsLnR5cGU9KCk9Pmwub3B0aW9ucy5maW5kKHQ9PnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZlXCIpKSxhfSkodCksdC51c2VBc0J1dHRvbiYmKHRoaXMuX3Jvb3QuYnV0dG9uPXQuZWwpLHQuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3Jvb3Qucm9vdCl9X2ZpbmFsQnVpbGQoKXtjb25zdCB0PXRoaXMub3B0aW9ucyxlPXRoaXMuX3Jvb3Q7aWYodC5jb250YWluZXIucmVtb3ZlQ2hpbGQoZS5yb290KSx0LmlubGluZSl7Y29uc3Qgbz10LmVsLnBhcmVudEVsZW1lbnQ7dC5lbC5uZXh0U2libGluZz9vLmluc2VydEJlZm9yZShlLmFwcCx0LmVsLm5leHRTaWJsaW5nKTpvLmFwcGVuZENoaWxkKGUuYXBwKX1lbHNlIHQuY29udGFpbmVyLmFwcGVuZENoaWxkKGUuYXBwKTt0LnVzZUFzQnV0dG9uP3QuaW5saW5lJiZ0LmVsLnJlbW92ZSgpOnQuZWwucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZS5yb290LHQuZWwpLHQuZGlzYWJsZWQmJnRoaXMuZGlzYWJsZSgpLHQuY29tcGFyaXNvbnx8KGUuYnV0dG9uLnN0eWxlLnRyYW5zaXRpb249XCJub25lXCIsdC51c2VBc0J1dHRvbnx8KGUucHJldmlldy5sYXN0Q29sb3Iuc3R5bGUudHJhbnNpdGlvbj1cIm5vbmVcIikpLHRoaXMuaGlkZSgpfV9idWlsZENvbXBvbmVudHMoKXtjb25zdCB0PXRoaXMsZT10aGlzLm9wdGlvbnMuY29tcG9uZW50cyxvPSh0Lm9wdGlvbnMuc2xpZGVyc3x8XCJ2XCIpLnJlcGVhdCgyKSxbbixpXT1vLm1hdGNoKC9eW3ZoXSskL2cpP286W10scj0oKT0+dGhpcy5fY29sb3J8fCh0aGlzLl9jb2xvcj10aGlzLl9sYXN0Q29sb3IuY2xvbmUoKSkscz17cGFsZXR0ZTpMKHtlbGVtZW50OnQuX3Jvb3QucGFsZXR0ZS5waWNrZXIsd3JhcHBlcjp0Ll9yb290LnBhbGV0dGUucGFsZXR0ZSxvbnN0b3A6KCk9PnQuX2VtaXQoXCJjaGFuZ2VzdG9wXCIsdCksb25jaGFuZ2UobyxuKXtpZighZS5wYWxldHRlKXJldHVybjtjb25zdCBpPXIoKSx7X3Jvb3Q6cyxvcHRpb25zOmN9PXQse2xhc3RDb2xvcjphLGN1cnJlbnRDb2xvcjpsfT1zLnByZXZpZXc7dC5fcmVjYWxjJiYoaS5zPTEwMCpvLGkudj0xMDAtMTAwKm4saS52PDAmJihpLnY9MCksdC5fdXBkYXRlT3V0cHV0KCkpO2NvbnN0IHA9aS50b1JHQkEoKS50b1N0cmluZygwKTt0aGlzLmVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZD1wLHRoaXMud3JhcHBlci5zdHlsZS5iYWNrZ3JvdW5kPVwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFyLWdyYWRpZW50KHRvIHRvcCwgcmdiYSgwLCAwLCAwLCBcIi5jb25jYXQoaS5hLFwiKSwgdHJhbnNwYXJlbnQpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCBoc2xhKFwiKS5jb25jYXQoaS5oLFwiLCAxMDAlLCA1MCUsIFwiKS5jb25jYXQoaS5hLFwiKSwgcmdiYSgyNTUsIDI1NSwgMjU1LCBcIikuY29uY2F0KGkuYSxcIikpXFxuICAgICAgICAgICAgICAgICAgICBcIiksYy5jb21wYXJpc29uP2MudXNlQXNCdXR0b258fHQuX2xhc3RDb2xvcnx8KGEuc3R5bGUuY29sb3I9cCk6KHMuYnV0dG9uLnN0eWxlLmNvbG9yPXAscy5idXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNsZWFyXCIpKTtjb25zdCB1PWkudG9IRVhBKCkudG9TdHJpbmcoKTtmb3IoY29uc3R7ZWw6ZSxjb2xvcjpvfW9mIHQuX3N3YXRjaENvbG9ycyllLmNsYXNzTGlzdFt1PT09by50b0hFWEEoKS50b1N0cmluZygpP1wiYWRkXCI6XCJyZW1vdmVcIl0oXCJwY3ItYWN0aXZlXCIpO2wuc3R5bGUuY29sb3I9cH19KSxodWU6TCh7bG9jazpcInZcIj09PWk/XCJoXCI6XCJ2XCIsZWxlbWVudDp0Ll9yb290Lmh1ZS5waWNrZXIsd3JhcHBlcjp0Ll9yb290Lmh1ZS5zbGlkZXIsb25zdG9wOigpPT50Ll9lbWl0KFwiY2hhbmdlc3RvcFwiLHQpLG9uY2hhbmdlKG8pe2lmKCFlLmh1ZXx8IWUucGFsZXR0ZSlyZXR1cm47Y29uc3Qgbj1yKCk7dC5fcmVjYWxjJiYobi5oPTM2MCpvKSx0aGlzLmVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yPVwiaHNsKFwiLmNvbmNhdChuLmgsXCIsIDEwMCUsIDUwJSlcIikscy5wYWxldHRlLnRyaWdnZXIoKX19KSxvcGFjaXR5Okwoe2xvY2s6XCJ2XCI9PT1uP1wiaFwiOlwidlwiLGVsZW1lbnQ6dC5fcm9vdC5vcGFjaXR5LnBpY2tlcix3cmFwcGVyOnQuX3Jvb3Qub3BhY2l0eS5zbGlkZXIsb25zdG9wOigpPT50Ll9lbWl0KFwiY2hhbmdlc3RvcFwiLHQpLG9uY2hhbmdlKG8pe2lmKCFlLm9wYWNpdHl8fCFlLnBhbGV0dGUpcmV0dXJuO2NvbnN0IG49cigpO3QuX3JlY2FsYyYmKG4uYT1NYXRoLnJvdW5kKDEwMCpvKS8xMDApLHRoaXMuZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kPVwicmdiYSgwLCAwLCAwLCBcIi5jb25jYXQobi5hLFwiKVwiKSxzLnBhbGV0dGUudHJpZ2dlcigpfX0pLHNlbGVjdGFibGU6UCh7ZWxlbWVudHM6dC5fcm9vdC5pbnRlcmFjdGlvbi5vcHRpb25zLGNsYXNzTmFtZTpcImFjdGl2ZVwiLG9uY2hhbmdlKGUpe3QuX3JlcHJlc2VudGF0aW9uPWUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiKS50b1VwcGVyQ2FzZSgpLHQuX3JlY2FsYyYmdC5fdXBkYXRlT3V0cHV0KCl9fSl9O3RoaXMuX2NvbXBvbmVudHM9c31fYmluZEV2ZW50cygpe2NvbnN0e19yb290OnQsb3B0aW9uczplfT10aGlzLG89W2EodC5pbnRlcmFjdGlvbi5jbGVhcixcImNsaWNrXCIsKCk9PnRoaXMuX2NsZWFyQ29sb3IoKSksYShbdC5pbnRlcmFjdGlvbi5jYW5jZWwsdC5wcmV2aWV3Lmxhc3RDb2xvcl0sXCJjbGlja1wiLCgpPT57dGhpcy5fZW1pdChcImNhbmNlbFwiLHRoaXMpLHRoaXMuc2V0SFNWQSguLi4odGhpcy5fbGFzdENvbG9yfHx0aGlzLl9jb2xvcikudG9IU1ZBKCksITApfSksYSh0LmludGVyYWN0aW9uLnNhdmUsXCJjbGlja1wiLCgpPT57IXRoaXMuYXBwbHlDb2xvcigpJiYhZS5zaG93QWx3YXlzJiZ0aGlzLmhpZGUoKX0pLGEodC5pbnRlcmFjdGlvbi5yZXN1bHQsW1wia2V5dXBcIixcImlucHV0XCJdLHQ9Pnt0aGlzLnNldENvbG9yKHQudGFyZ2V0LnZhbHVlLCEwKSYmIXRoaXMuX2luaXRpYWxpemluZ0FjdGl2ZSYmdGhpcy5fZW1pdChcImNoYW5nZVwiLHRoaXMuX2NvbG9yKSx0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpfSksYSh0LmludGVyYWN0aW9uLnJlc3VsdCxbXCJmb2N1c1wiLFwiYmx1clwiXSx0PT57dGhpcy5fcmVjYWxjPVwiYmx1clwiPT09dC50eXBlLHRoaXMuX3JlY2FsYyYmdGhpcy5fdXBkYXRlT3V0cHV0KCl9KSxhKFt0LnBhbGV0dGUucGFsZXR0ZSx0LnBhbGV0dGUucGlja2VyLHQuaHVlLnNsaWRlcix0Lmh1ZS5waWNrZXIsdC5vcGFjaXR5LnNsaWRlcix0Lm9wYWNpdHkucGlja2VyXSxbXCJtb3VzZWRvd25cIixcInRvdWNoc3RhcnRcIl0sKCk9PnRoaXMuX3JlY2FsYz0hMCldO2lmKCFlLnNob3dBbHdheXMpe2NvbnN0IG49ZS5jbG9zZVdpdGhLZXk7by5wdXNoKGEodC5idXR0b24sXCJjbGlja1wiLCgpPT50aGlzLmlzT3BlbigpP3RoaXMuaGlkZSgpOnRoaXMuc2hvdygpKSxhKGRvY3VtZW50LFwia2V5dXBcIix0PT50aGlzLmlzT3BlbigpJiYodC5rZXk9PT1ufHx0LmNvZGU9PT1uKSYmdGhpcy5oaWRlKCkpLGEoZG9jdW1lbnQsW1widG91Y2hzdGFydFwiLFwibW91c2Vkb3duXCJdLGU9Pnt0aGlzLmlzT3BlbigpJiYhZChlKS5zb21lKGU9PmU9PT10LmFwcHx8ZT09PXQuYnV0dG9uKSYmdGhpcy5oaWRlKCl9LHtjYXB0dXJlOiEwfSkpfWlmKGUuYWRqdXN0YWJsZU51bWJlcnMpe2NvbnN0IGU9e3JnYmE6WzI1NSwyNTUsMjU1LDFdLGhzdmE6WzM2MCwxMDAsMTAwLDFdLGhzbGE6WzM2MCwxMDAsMTAwLDFdLGNteWs6WzEwMCwxMDAsMTAwLDEwMF19O20odC5pbnRlcmFjdGlvbi5yZXN1bHQsKHQsbyxuKT0+e2NvbnN0IGk9ZVt0aGlzLmdldENvbG9yUmVwcmVzZW50YXRpb24oKS50b0xvd2VyQ2FzZSgpXTtpZihpKXtjb25zdCBlPWlbbl0scj10KyhlPj0xMDA/MWUzKm86byk7cmV0dXJuIHI8PTA/MDpOdW1iZXIoKHI8ZT9yOmUpLnRvUHJlY2lzaW9uKDMpKX1yZXR1cm4gdH0pfWlmKGUuYXV0b1JlcG9zaXRpb24mJiFlLmlubGluZSl7bGV0IHQ9bnVsbDtjb25zdCBuPXRoaXM7by5wdXNoKGEod2luZG93LFtcInNjcm9sbFwiLFwicmVzaXplXCJdLCgpPT57bi5pc09wZW4oKSYmKGUuY2xvc2VPblNjcm9sbCYmbi5oaWRlKCksbnVsbD09PXQ/KHQ9c2V0VGltZW91dCgoKT0+dD1udWxsLDEwMCkscmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbiBlKCl7bi5fcmVQb3NpdGlvbmluZ1BpY2tlcigpLG51bGwhPT10JiZyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZSl9KSkpOihjbGVhclRpbWVvdXQodCksdD1zZXRUaW1lb3V0KCgpPT50PW51bGwsMTAwKSkpfSx7Y2FwdHVyZTohMH0pKX10aGlzLl9ldmVudEJpbmRpbmdzPW99X3JlUG9zaXRpb25pbmdQaWNrZXIoKXtjb25zdHtvcHRpb25zOnR9PXRoaXM7dC5pbmxpbmV8fHRoaXMuX25hbm9wb3AudXBkYXRlKHQucG9zaXRpb24sIXRoaXMuX3JlY2FsYyl9X3VwZGF0ZU91dHB1dCgpe2NvbnN0e19yb290OnQsX2NvbG9yOmUsb3B0aW9uczpvfT10aGlzO2lmKHQuaW50ZXJhY3Rpb24udHlwZSgpKXtjb25zdCBuPVwidG9cIi5jb25jYXQodC5pbnRlcmFjdGlvbi50eXBlKCkuZ2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIpKTt0LmludGVyYWN0aW9uLnJlc3VsdC52YWx1ZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlW25dP2Vbbl0oKS50b1N0cmluZyhvLm91dHB1dFByZWNpc2lvbik6XCJcIn0hdGhpcy5faW5pdGlhbGl6aW5nQWN0aXZlJiZ0aGlzLl9yZWNhbGMmJnRoaXMuX2VtaXQoXCJjaGFuZ2VcIixlKX1fY2xlYXJDb2xvcih0PSExKXtjb25zdHtfcm9vdDplLG9wdGlvbnM6b309dGhpcztvLnVzZUFzQnV0dG9ufHwoZS5idXR0b24uc3R5bGUuY29sb3I9XCJyZ2JhKDAsIDAsIDAsIDAuMTUpXCIpLGUuYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjbGVhclwiKSxvLnNob3dBbHdheXN8fHRoaXMuaGlkZSgpLHRoaXMuX2xhc3RDb2xvcj1udWxsLHRoaXMuX2luaXRpYWxpemluZ0FjdGl2ZXx8dHx8KHRoaXMuX2VtaXQoXCJzYXZlXCIsbnVsbCksdGhpcy5fZW1pdChcImNsZWFyXCIsdGhpcykpfV9wYXJzZUxvY2FsQ29sb3IodCl7Y29uc3R7dmFsdWVzOmUsdHlwZTpvLGE6bn09aih0KSx7bG9ja09wYWNpdHk6aX09dGhpcy5vcHRpb25zLHI9dm9pZCAwIT09biYmMSE9PW47cmV0dXJuIGUmJjM9PT1lLmxlbmd0aCYmKGVbM109dm9pZCAwKSx7dmFsdWVzOiFlfHxpJiZyP251bGw6ZSx0eXBlOm99fV9lbWl0KHQsLi4uZSl7dGhpcy5fZXZlbnRMaXN0ZW5lclt0XS5mb3JFYWNoKHQ9PnQoLi4uZSx0aGlzKSl9b24odCxlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZcInN0cmluZ1wiPT10eXBlb2YgdCYmdCBpbiB0aGlzLl9ldmVudExpc3RlbmVyJiZ0aGlzLl9ldmVudExpc3RlbmVyW3RdLnB1c2goZSksdGhpc31vZmYodCxlKXtjb25zdCBvPXRoaXMuX2V2ZW50TGlzdGVuZXJbdF07aWYobyl7Y29uc3QgdD1vLmluZGV4T2YoZSk7fnQmJm8uc3BsaWNlKHQsMSl9cmV0dXJuIHRoaXN9YWRkU3dhdGNoKHQpe2NvbnN0e3ZhbHVlczplfT10aGlzLl9wYXJzZUxvY2FsQ29sb3IodCk7aWYoZSl7Y29uc3R7X3N3YXRjaENvbG9yczp0LF9yb290Om99PXRoaXMsbj14KC4uLmUpLGk9cCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9XCJjb2xvcjogJy5jb25jYXQobi50b1JHQkEoKS50b1N0cmluZygwKSwnXCIgYXJpYS1sYWJlbD1cImNvbG9yIHN3YXRjaFwiLz4nKSk7cmV0dXJuIG8uc3dhdGNoZXMuYXBwZW5kQ2hpbGQoaSksdC5wdXNoKHtlbDppLGNvbG9yOm59KSx0aGlzLl9ldmVudEJpbmRpbmdzLnB1c2goYShpLFwiY2xpY2tcIiwoKT0+e3RoaXMuc2V0SFNWQSguLi5uLnRvSFNWQSgpLCEwKSx0aGlzLl9lbWl0KFwic3dhdGNoc2VsZWN0XCIsbiksdGhpcy5fZW1pdChcImNoYW5nZVwiLG4pfSkpLCEwfXJldHVybiExfXJlbW92ZVN3YXRjaCh0KXtjb25zdCBlPXRoaXMuX3N3YXRjaENvbG9yc1t0XTtpZihlKXtjb25zdHtlbDpvfT1lO3JldHVybiB0aGlzLl9yb290LnN3YXRjaGVzLnJlbW92ZUNoaWxkKG8pLHRoaXMuX3N3YXRjaENvbG9ycy5zcGxpY2UodCwxKSwhMH1yZXR1cm4hMX1hcHBseUNvbG9yKHQ9ITEpe2NvbnN0e3ByZXZpZXc6ZSxidXR0b246b309dGhpcy5fcm9vdCxuPXRoaXMuX2NvbG9yLnRvUkdCQSgpLnRvU3RyaW5nKDApO3JldHVybiBlLmxhc3RDb2xvci5zdHlsZS5jb2xvcj1uLHRoaXMub3B0aW9ucy51c2VBc0J1dHRvbnx8KG8uc3R5bGUuY29sb3I9biksby5jbGFzc0xpc3QucmVtb3ZlKFwiY2xlYXJcIiksdGhpcy5fbGFzdENvbG9yPXRoaXMuX2NvbG9yLmNsb25lKCksdGhpcy5faW5pdGlhbGl6aW5nQWN0aXZlfHx0fHx0aGlzLl9lbWl0KFwic2F2ZVwiLHRoaXMuX2NvbG9yKSx0aGlzfWRlc3Ryb3koKXt0aGlzLl9ldmVudEJpbmRpbmdzLmZvckVhY2godD0+bCguLi50KSksT2JqZWN0LmtleXModGhpcy5fY29tcG9uZW50cykuZm9yRWFjaCh0PT50aGlzLl9jb21wb25lbnRzW3RdLmRlc3Ryb3koKSl9ZGVzdHJveUFuZFJlbW92ZSgpe3RoaXMuZGVzdHJveSgpO2NvbnN0e3Jvb3Q6dCxhcHA6ZX09dGhpcy5fcm9vdDt0LnBhcmVudEVsZW1lbnQmJnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0KSxlLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZSksT2JqZWN0LmtleXModGhpcykuZm9yRWFjaCh0PT50aGlzW3RdPW51bGwpfWhpZGUoKXtyZXR1cm4gdGhpcy5fcm9vdC5hcHAuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIiksdGhpcy5fZW1pdChcImhpZGVcIix0aGlzKSx0aGlzfXNob3coKXtyZXR1cm4gdGhpcy5vcHRpb25zLmRpc2FibGVkfHwodGhpcy5fcm9vdC5hcHAuY2xhc3NMaXN0LmFkZChcInZpc2libGVcIiksdGhpcy5fcmVQb3NpdGlvbmluZ1BpY2tlcigpLHRoaXMuX2VtaXQoXCJzaG93XCIsdGhpcykpLHRoaXN9aXNPcGVuKCl7cmV0dXJuIHRoaXMuX3Jvb3QuYXBwLmNsYXNzTGlzdC5jb250YWlucyhcInZpc2libGVcIil9c2V0SFNWQSh0PTM2MCxlPTAsbz0wLG49MSxpPSExKXtjb25zdCByPXRoaXMuX3JlY2FsYztpZih0aGlzLl9yZWNhbGM9ITEsdDwwfHx0PjM2MHx8ZTwwfHxlPjEwMHx8bzwwfHxvPjEwMHx8bjwwfHxuPjEpcmV0dXJuITE7dGhpcy5fY29sb3I9eCh0LGUsbyxuKTtjb25zdHtodWU6cyxvcGFjaXR5OmMscGFsZXR0ZTphfT10aGlzLl9jb21wb25lbnRzO3JldHVybiBzLnVwZGF0ZSh0LzM2MCksYy51cGRhdGUobiksYS51cGRhdGUoZS8xMDAsMS1vLzEwMCksaXx8dGhpcy5hcHBseUNvbG9yKCksciYmdGhpcy5fdXBkYXRlT3V0cHV0KCksdGhpcy5fcmVjYWxjPXIsITB9c2V0Q29sb3IodCxlPSExKXtpZihudWxsPT09dClyZXR1cm4gdGhpcy5fY2xlYXJDb2xvcihlKSwhMDtjb25zdHt2YWx1ZXM6byx0eXBlOm59PXRoaXMuX3BhcnNlTG9jYWxDb2xvcih0KTtpZihvKXtjb25zdCB0PW4udG9VcHBlckNhc2UoKSx7b3B0aW9uczppfT10aGlzLl9yb290LmludGVyYWN0aW9uLHI9aS5maW5kKGU9PmUuZ2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIpPT09dCk7aWYociYmIXIuaGlkZGVuKWZvcihjb25zdCB0IG9mIGkpdC5jbGFzc0xpc3RbdD09PXI/XCJhZGRcIjpcInJlbW92ZVwiXShcImFjdGl2ZVwiKTtyZXR1cm4hIXRoaXMuc2V0SFNWQSguLi5vLGUpJiZ0aGlzLnNldENvbG9yUmVwcmVzZW50YXRpb24odCl9cmV0dXJuITF9c2V0Q29sb3JSZXByZXNlbnRhdGlvbih0KXtyZXR1cm4gdD10LnRvVXBwZXJDYXNlKCksISF0aGlzLl9yb290LmludGVyYWN0aW9uLm9wdGlvbnMuZmluZChlPT5lLmdldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiKS5zdGFydHNXaXRoKHQpJiYhZS5jbGljaygpKX1nZXRDb2xvclJlcHJlc2VudGF0aW9uKCl7cmV0dXJuIHRoaXMuX3JlcHJlc2VudGF0aW9ufWdldENvbG9yKCl7cmV0dXJuIHRoaXMuX2NvbG9yfWdldFNlbGVjdGVkQ29sb3IoKXtyZXR1cm4gdGhpcy5fbGFzdENvbG9yfWdldFJvb3QoKXtyZXR1cm4gdGhpcy5fcm9vdH1kaXNhYmxlKCl7cmV0dXJuIHRoaXMuaGlkZSgpLHRoaXMub3B0aW9ucy5kaXNhYmxlZD0hMCx0aGlzLl9yb290LmJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIiksdGhpc31lbmFibGUoKXtyZXR1cm4gdGhpcy5vcHRpb25zLmRpc2FibGVkPSExLHRoaXMuX3Jvb3QuYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKSx0aGlzfX1SLnV0aWxzPW4sUi5saWJzPXtIU1ZhQ29sb3I6eCxNb3ZlYWJsZTpMLE5hbm9wb3A6QixTZWxlY3RhYmxlOlB9LFIuY3JlYXRlPXQ9Pm5ldyBSKHQpLFIudmVyc2lvbj12LmE7ZS5kZWZhdWx0PVJ9XSkuZGVmYXVsdH0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpY2tyLm1pbi5qcy5tYXAiLCIvLyBTaG9ydGhhbmRzXG5jb25zdCB7bWluLCBtYXgsIGZsb29yLCByb3VuZH0gPSBNYXRoO1xuXG4vKipcbiAqIFRyaWVzIHRvIGNvbnZlcnQgYSBjb2xvciBuYW1lIHRvIHJnYi9hIGhleCByZXByZXNlbnRhdGlvblxuICogQHBhcmFtIG5hbWVcbiAqIEByZXR1cm5zIHtzdHJpbmcgfCBDYW52YXNHcmFkaWVudCB8IENhbnZhc1BhdHRlcm59XG4gKi9cbmZ1bmN0aW9uIHN0YW5kYXJkaXplQ29sb3IobmFtZSkge1xuXG4gICAgLy8gU2luY2UgaW52YWxpZCBjb2xvcidzIHdpbGwgYmUgcGFyc2VkIGFzIGJsYWNrLCBmaWx0ZXIgdGhlbSBvdXRcbiAgICBpZiAobmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYmxhY2snKSB7XG4gICAgICAgIHJldHVybiAnIzAwMCc7XG4gICAgfVxuXG4gICAgY29uc3QgY3R4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguZmlsbFN0eWxlID0gbmFtZTtcbiAgICByZXR1cm4gY3R4LmZpbGxTdHlsZSA9PT0gJyMwMDAnID8gbnVsbCA6IGN0eC5maWxsU3R5bGU7XG59XG5cbi8qKlxuICogQ29udmVydCBIU1Ygc3BlY3RydW0gdG8gUkdCLlxuICogQHBhcmFtIGggSHVlXG4gKiBAcGFyYW0gcyBTYXR1cmF0aW9uXG4gKiBAcGFyYW0gdiBWYWx1ZVxuICogQHJldHVybnMge251bWJlcltdfSBBcnJheSB3aXRoIHJnYiB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc3ZUb1JnYihoLCBzLCB2KSB7XG4gICAgaCA9IChoIC8gMzYwKSAqIDY7XG4gICAgcyAvPSAxMDA7XG4gICAgdiAvPSAxMDA7XG5cbiAgICBjb25zdCBpID0gZmxvb3IoaCk7XG5cbiAgICBjb25zdCBmID0gaCAtIGk7XG4gICAgY29uc3QgcCA9IHYgKiAoMSAtIHMpO1xuICAgIGNvbnN0IHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgY29uc3QgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKTtcblxuICAgIGNvbnN0IG1vZCA9IGkgJSA2O1xuICAgIGNvbnN0IHIgPSBbdiwgcSwgcCwgcCwgdCwgdl1bbW9kXTtcbiAgICBjb25zdCBnID0gW3QsIHYsIHYsIHEsIHAsIHBdW21vZF07XG4gICAgY29uc3QgYiA9IFtwLCBwLCB0LCB2LCB2LCBxXVttb2RdO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgciAqIDI1NSxcbiAgICAgICAgZyAqIDI1NSxcbiAgICAgICAgYiAqIDI1NVxuICAgIF07XG59XG5cbi8qKlxuICogQ29udmVydCBIU1Ygc3BlY3RydW0gdG8gSGV4LlxuICogQHBhcmFtIGggSHVlXG4gKiBAcGFyYW0gcyBTYXR1cmF0aW9uXG4gKiBAcGFyYW0gdiBWYWx1ZVxuICogQHJldHVybnMge3N0cmluZ1tdfSBIZXggdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc3ZUb0hleChoLCBzLCB2KSB7XG4gICAgcmV0dXJuIGhzdlRvUmdiKGgsIHMsIHYpLm1hcCh2ID0+XG4gICAgICAgIHJvdW5kKHYpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpXG4gICAgKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhTViBzcGVjdHJ1bSB0byBDTVlLLlxuICogQHBhcmFtIGggSHVlXG4gKiBAcGFyYW0gcyBTYXR1cmF0aW9uXG4gKiBAcGFyYW0gdiBWYWx1ZVxuICogQHJldHVybnMge251bWJlcltdfSBDTVlLIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHN2VG9DbXlrKGgsIHMsIHYpIHtcbiAgICBjb25zdCByZ2IgPSBoc3ZUb1JnYihoLCBzLCB2KTtcbiAgICBjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuICAgIGNvbnN0IGcgPSByZ2JbMV0gLyAyNTU7XG4gICAgY29uc3QgYiA9IHJnYlsyXSAvIDI1NTtcblxuICAgIGNvbnN0IGsgPSBtaW4oMSAtIHIsIDEgLSBnLCAxIC0gYik7XG4gICAgY29uc3QgYyA9IGsgPT09IDEgPyAwIDogKDEgLSByIC0gaykgLyAoMSAtIGspO1xuICAgIGNvbnN0IG0gPSBrID09PSAxID8gMCA6ICgxIC0gZyAtIGspIC8gKDEgLSBrKTtcbiAgICBjb25zdCB5ID0gayA9PT0gMSA/IDAgOiAoMSAtIGIgLSBrKSAvICgxIC0gayk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgICBjICogMTAwLFxuICAgICAgICBtICogMTAwLFxuICAgICAgICB5ICogMTAwLFxuICAgICAgICBrICogMTAwXG4gICAgXTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhTViBzcGVjdHJ1bSB0byBIU0wuXG4gKiBAcGFyYW0gaCBIdWVcbiAqIEBwYXJhbSBzIFNhdHVyYXRpb25cbiAqIEBwYXJhbSB2IFZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IEhTTCB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhzdlRvSHNsKGgsIHMsIHYpIHtcbiAgICBzIC89IDEwMDtcbiAgICB2IC89IDEwMDtcblxuICAgIGNvbnN0IGwgPSAoMiAtIHMpICogdiAvIDI7XG5cbiAgICBpZiAobCAhPT0gMCkge1xuICAgICAgICBpZiAobCA9PT0gMSkge1xuICAgICAgICAgICAgcyA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAobCA8IDAuNSkge1xuICAgICAgICAgICAgcyA9IHMgKiB2IC8gKGwgKiAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMgPSBzICogdiAvICgyIC0gbCAqIDIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgaCxcbiAgICAgICAgcyAqIDEwMCxcbiAgICAgICAgbCAqIDEwMFxuICAgIF07XG59XG5cbi8qKlxuICogQ29udmVydCBSR0IgdG8gSFNWLlxuICogQHBhcmFtIHIgUmVkXG4gKiBAcGFyYW0gZyBHcmVlblxuICogQHBhcmFtIGIgQmx1ZVxuICogQHJldHVybiB7bnVtYmVyW119IEhTViB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHJnYlRvSHN2KHIsIGcsIGIpIHtcbiAgICByIC89IDI1NTtcbiAgICBnIC89IDI1NTtcbiAgICBiIC89IDI1NTtcblxuICAgIGNvbnN0IG1pblZhbCA9IG1pbihyLCBnLCBiKTtcbiAgICBjb25zdCBtYXhWYWwgPSBtYXgociwgZywgYik7XG4gICAgY29uc3QgZGVsdGEgPSBtYXhWYWwgLSBtaW5WYWw7XG5cbiAgICBsZXQgaCwgcztcbiAgICBjb25zdCB2ID0gbWF4VmFsO1xuICAgIGlmIChkZWx0YSA9PT0gMCkge1xuICAgICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IGRlbHRhIC8gbWF4VmFsO1xuICAgICAgICBjb25zdCBkciA9ICgoKG1heFZhbCAtIHIpIC8gNikgKyAoZGVsdGEgLyAyKSkgLyBkZWx0YTtcbiAgICAgICAgY29uc3QgZGcgPSAoKChtYXhWYWwgLSBnKSAvIDYpICsgKGRlbHRhIC8gMikpIC8gZGVsdGE7XG4gICAgICAgIGNvbnN0IGRiID0gKCgobWF4VmFsIC0gYikgLyA2KSArIChkZWx0YSAvIDIpKSAvIGRlbHRhO1xuXG4gICAgICAgIGlmIChyID09PSBtYXhWYWwpIHtcbiAgICAgICAgICAgIGggPSBkYiAtIGRnO1xuICAgICAgICB9IGVsc2UgaWYgKGcgPT09IG1heFZhbCkge1xuICAgICAgICAgICAgaCA9ICgxIC8gMykgKyBkciAtIGRiO1xuICAgICAgICB9IGVsc2UgaWYgKGIgPT09IG1heFZhbCkge1xuICAgICAgICAgICAgaCA9ICgyIC8gMykgKyBkZyAtIGRyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGggPCAwKSB7XG4gICAgICAgICAgICBoICs9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoaCA+IDEpIHtcbiAgICAgICAgICAgIGggLT0gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICAgIGggKiAzNjAsXG4gICAgICAgIHMgKiAxMDAsXG4gICAgICAgIHYgKiAxMDBcbiAgICBdO1xufVxuXG4vKipcbiAqIENvbnZlcnQgQ01ZSyB0byBIU1YuXG4gKiBAcGFyYW0gYyBDeWFuXG4gKiBAcGFyYW0gbSBNYWdlbnRhXG4gKiBAcGFyYW0geSBZZWxsb3dcbiAqIEBwYXJhbSBrIEtleSAoQmxhY2spXG4gKiBAcmV0dXJuIHtudW1iZXJbXX0gSFNWIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gY215a1RvSHN2KGMsIG0sIHksIGspIHtcbiAgICBjIC89IDEwMDtcbiAgICBtIC89IDEwMDtcbiAgICB5IC89IDEwMDtcbiAgICBrIC89IDEwMDtcblxuICAgIGNvbnN0IHIgPSAoMSAtIG1pbigxLCBjICogKDEgLSBrKSArIGspKSAqIDI1NTtcbiAgICBjb25zdCBnID0gKDEgLSBtaW4oMSwgbSAqICgxIC0gaykgKyBrKSkgKiAyNTU7XG4gICAgY29uc3QgYiA9ICgxIC0gbWluKDEsIHkgKiAoMSAtIGspICsgaykpICogMjU1O1xuXG4gICAgcmV0dXJuIFsuLi5yZ2JUb0hzdihyLCBnLCBiKV07XG59XG5cbi8qKlxuICogQ29udmVydCBIU0wgdG8gSFNWLlxuICogQHBhcmFtIGggSHVlXG4gKiBAcGFyYW0gcyBTYXR1cmF0aW9uXG4gKiBAcGFyYW0gbCBMaWdodG5lc3NcbiAqIEByZXR1cm4ge251bWJlcltdfSBIU1YgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBoc2xUb0hzdihoLCBzLCBsKSB7XG4gICAgcyAvPSAxMDA7XG4gICAgbCAvPSAxMDA7XG4gICAgcyAqPSBsIDwgMC41ID8gbCA6IDEgLSBsO1xuXG4gICAgY29uc3QgbnMgPSAoMiAqIHMgLyAobCArIHMpKSAqIDEwMDtcbiAgICBjb25zdCB2ID0gKGwgKyBzKSAqIDEwMDtcbiAgICByZXR1cm4gW2gsIG5zLCB2XTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IEhFWCB0byBIU1YuXG4gKiBAcGFyYW0gaGV4IEhleGFkZWNpbWFsIHN0cmluZyBvZiByZ2IgY29sb3JzLCBjYW4gaGF2ZSBsZW5ndGggMyBvciA2LlxuICogQHJldHVybiB7bnVtYmVyW119IEhTViB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGhleFRvSHN2KGhleCkge1xuICAgIHJldHVybiByZ2JUb0hzdiguLi5oZXgubWF0Y2goLy57Mn0vZykubWFwKHYgPT4gcGFyc2VJbnQodiwgMTYpKSk7XG59XG5cbi8qKlxuICogVHJ5J3MgdG8gcGFyc2UgYSBzdHJpbmcgd2hpY2ggcmVwcmVzZW50cyBhIGNvbG9yIHRvIGEgSFNWIGFycmF5LlxuICogQ3VycmVudCBzdXBwb3J0ZWQgdHlwZXMgYXJlIGNteWssIHJnYmEsIGhzbGEgYW5kIGhleGFkZWNpbWFsLlxuICogQHBhcmFtIHN0clxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9IU1ZBKHN0cikge1xuXG4gICAgLy8gQ2hlY2sgaWYgc3RyaW5nIGlzIGEgY29sb3ItbmFtZVxuICAgIHN0ciA9IHN0ci5tYXRjaCgvXlthLXpBLVpdKyQvKSA/IHN0YW5kYXJkaXplQ29sb3Ioc3RyKSA6IHN0cjtcblxuICAgIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnMgdG8gbWF0Y2ggZGlmZmVyZW50IHR5cGVzIG9mIGNvbG9yIHJlcHJlc2VudGlvblxuICAgIGNvbnN0IHJlZ2V4ID0ge1xuICAgICAgICBjbXlrOiAvXmNteWtbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKykvaSxcbiAgICAgICAgcmdiYTogL14oKHJnYmEpfHJnYilbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSo/KFtcXGQuXSt8JCkvaSxcbiAgICAgICAgaHNsYTogL14oKGhzbGEpfGhzbClbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSo/KFtcXGQuXSt8JCkvaSxcbiAgICAgICAgaHN2YTogL14oKGhzdmEpfGhzdilbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSsoW1xcZC5dKylbXFxEXSo/KFtcXGQuXSt8JCkvaSxcbiAgICAgICAgaGV4YTogL14jPygoW1xcZEEtRmEtZl17Myw0fSl8KFtcXGRBLUZhLWZdezZ9KXwoW1xcZEEtRmEtZl17OH0pKSQvaVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBBcnJheSBvZiBhbnkgdHlwZSwgY29udmVydCBzdHJpbmdzIHdoaWNoIHJlcHJlc2VudHNcbiAgICAgKiBhIG51bWJlciB0byBhIG51bWJlciBhbiBhbnl0aGluZyBlbHNlIHRvIHVuZGVmaW5lZC5cbiAgICAgKiBAcGFyYW0gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHsqfVxuICAgICAqL1xuICAgIGNvbnN0IG51bWFyaXplID0gYXJyYXkgPT4gYXJyYXkubWFwKHYgPT4gL14ofFxcZCspXFwuXFxkK3xcXGQrJC8udGVzdCh2KSA/IE51bWJlcih2KSA6IHVuZGVmaW5lZCk7XG5cbiAgICBsZXQgbWF0Y2g7XG4gICAgaW52YWxpZDogZm9yIChjb25zdCB0eXBlIGluIHJlZ2V4KSB7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgY3VycmVudCBzY2hlbWUgcGFzc2VkXG4gICAgICAgIGlmICghKG1hdGNoID0gcmVnZXhbdHlwZV0uZXhlYyhzdHIpKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYXRjaFsyXSBkb2VzIG9ubHkgY29udGFpbiBhIHRydWx5IHZhbHVlIGlmIHJnYmEsIGhzbGEsIG9yIGhzbGEgZ290IG1hdGNoZWRcbiAgICAgICAgY29uc3QgYWxwaGFWYWxpZCA9IGEgPT4gKCEhbWF0Y2hbMl0gPT09ICh0eXBlb2YgYSA9PT0gJ251bWJlcicpKTtcblxuICAgICAgICAvLyBUcnkgdG8gY29udmVydFxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NteWsnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgWywgYywgbSwgeSwga10gPSBudW1hcml6ZShtYXRjaCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYyA+IDEwMCB8fCBtID4gMTAwIHx8IHkgPiAxMDAgfHwgayA+IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhayBpbnZhbGlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWVzOiBjbXlrVG9Ic3YoYywgbSwgeSwgayksIHR5cGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmdiYSc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCAsICwgciwgZywgYiwgYV0gPSBudW1hcml6ZShtYXRjaCk7XG5cbiAgICAgICAgICAgICAgICBpZiAociA+IDI1NSB8fCBnID4gMjU1IHx8IGIgPiAyNTUgfHwgYSA8IDAgfHwgYSA+IDEgfHwgIWFscGhhVmFsaWQoYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW52YWxpZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge3ZhbHVlczogWy4uLnJnYlRvSHN2KHIsIGcsIGIpLCBhXSwgYSwgdHlwZX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdoZXhhJzoge1xuICAgICAgICAgICAgICAgIGxldCBbLCBoZXhdID0gbWF0Y2g7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gNCB8fCBoZXgubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGhleCA9IGhleC5zcGxpdCgnJykubWFwKHYgPT4gdiArIHYpLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHJhdyA9IGhleC5zdWJzdHJpbmcoMCwgNik7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSBoZXguc3Vic3RyaW5nKDYpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCAwIC0gMjU1IHRvIDAgLSAxIGZvciBvcGFjaXR5XG4gICAgICAgICAgICAgICAgYSA9IGEgPyAocGFyc2VJbnQoYSwgMTYpIC8gMjU1KSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWVzOiBbLi4uaGV4VG9Ic3YocmF3KSwgYV0sIGEsIHR5cGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaHNsYSc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCAsICwgaCwgcywgbCwgYV0gPSBudW1hcml6ZShtYXRjaCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaCA+IDM2MCB8fCBzID4gMTAwIHx8IGwgPiAxMDAgfHwgYSA8IDAgfHwgYSA+IDEgfHwgIWFscGhhVmFsaWQoYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgaW52YWxpZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge3ZhbHVlczogWy4uLmhzbFRvSHN2KGgsIHMsIGwpLCBhXSwgYSwgdHlwZX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdoc3ZhJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IFssICwgLCBoLCBzLCB2LCBhXSA9IG51bWFyaXplKG1hdGNoKTtcblxuICAgICAgICAgICAgICAgIGlmIChoID4gMzYwIHx8IHMgPiAxMDAgfHwgdiA+IDEwMCB8fCBhIDwgMCB8fCBhID4gMSB8fCAhYWxwaGFWYWxpZChhKSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhayBpbnZhbGlkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWVzOiBbaCwgcywgdiwgYV0sIGEsIHR5cGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHt2YWx1ZXM6IG51bGwsIHR5cGU6IG51bGx9O1xufVxuIiwiaW1wb3J0IHsgdXRpbHMgfSBmcm9tICdAc2ltb253ZXAvcGlja3InO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PlxuICAgIHV0aWxzLmNyZWF0ZUZyb21UZW1wbGF0ZShgXG48ZGl2IGNsYXNzPVwiZ3BpY2tyXCIgOnJlZj1cInJvb3RcIj5cblxuICAgIDxkaXYgOnJlZj1cInBpY2tyXCI+PC9kaXY+XG4gICAgPGRpdiA6b2JqPVwiZ3JhZGllbnRcIiBjbGFzcz1cImdwY3ItaW50ZXJhY3Rpb25cIj5cbiAgICA8ZGl2IDpyZWY9XCJyZXN1bHRcIiBjbGFzcz1cImdwY3ItcmVzdWx0XCI+XG4gICAgICAgIFxuICAgICAgICAgPGRpdiA6cmVmPVwibW9kZVwiIGRhdGEtbW9kZT1cImxpbmVhclwiIGNsYXNzPVwiZ3Bjci1tb2RlXCI+PC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgOnJlZj1cImFuZ2xlXCIgY2xhc3M9XCJncGNyLWFuZ2xlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiA6cmVmPVwiYXJyb3dcIj48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IDpyZWY9XCJwb3NcIiBjbGFzcz1cImdwY3ItcG9zXCI+XG4gICAgICAgICAgICAgICAgJHtbJ3RsJywgJ3RtJywgJ3RyJywgJ2wnLCAnbScsICdyJywgJ2JsJywgJ2JtJywgJ2JyJ11cbiAgICAgICAgICAgICAgICAgICAgLm1hcCgodikgPT4gYDxkaXYgZGF0YS1wb3M9XCIke3Z9XCI+PC9kaXY+YClcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJycpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgOm9iaj1cInN0b3BzXCIgY2xhc3M9XCJncGNyLXN0b3BzXCI+XG4gICAgICAgICAgICA8ZGl2IDpyZWY9XCJwcmV2aWV3XCIgY2xhc3M9XCJncGNyLXN0b3AtcHJldmlld1wiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiA6cmVmPVwibWFya2Vyc1wiIGNsYXNzPVwiZ3Bjci1zdG9wLW1hcmtlclwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICBcbiAgICA8L2Rpdj5cblxuPC9kaXY+XG5gKTtcbiIsImV4cG9ydCBkZWZhdWx0IChldnQpID0+IHtcbiAgICBjb25zdCB0YXAgPSAoZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0pIHx8IGV2dDtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YXAsXG4gICAgICAgIHg6IHRhcC5jbGllbnRYLFxuICAgICAgICB5OiB0YXAuY2xpZW50WSxcbiAgICAgICAgdGFyZ2V0OiB0YXAudGFyZ2V0LFxuICAgIH07XG59O1xuIiwibGV0IHRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG5mdW5jdGlvbiogbWF0Y2hBbGwoY29udGVudCwgcmVnZXhwLCBncm91cCA9IC0xKSB7XG4gICAgZm9yIChsZXQgbWF0Y2g7IChtYXRjaCA9IHJlZ2V4cC5leGVjKGNvbnRlbnQpKTsgKSB7XG4gICAgICAgIHlpZWxkIH5ncm91cCA/IG1hdGNoW2dyb3VwXS50cmltKCkgOiBtYXRjaC5tYXAoKHYpID0+IHYudHJpbSgpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoKGNvbnRlbnQsIHJlZ2V4cCwgZ3JvdXAgPSAtMSkge1xuICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaChyZWdleHApO1xuICAgIHJldHVybiBtYXRjaCA/ICh+Z3JvdXAgPyBtYXRjaFtncm91cF0gOiBtYXRjaCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVHcmFkaWVudChzdHIpIHtcbiAgICB0cy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBzdHI7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUodHMpLmJhY2tncm91bmRJbWFnZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb2xvcihzdHIpIHtcbiAgICBjb25zdCBkZWYgPSAncmdiYSgwLCAwLCAwLCAwKSc7XG4gICAgdHMuc3R5bGUuY29sb3IgPSBkZWY7XG5cbiAgICBpZiAoc3RyID09PSBkZWYpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB0cy5zdHlsZS5jb2xvciA9IHN0cjtcbiAgICBjb25zdCBjb2xvciA9IGdldENvbXB1dGVkU3R5bGUodHMpLmNvbG9yO1xuICAgIHJldHVybiBjb2xvciA9PT0gZGVmID8gbnVsbCA6IGNvbG9yO1xufVxuXG5mdW5jdGlvbiBwYXJzZUdyYWRpZW50KHN0cikge1xuICAgIC8vIFZhbGlkYXRlIGdyYWRpZW50XG4gICAgc3RyID0gbm9ybWFsaXplR3JhZGllbnQoc3RyKTtcbiAgICBpZiAoIXN0cikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBSZXNvbHZlIGdyYWRpZW50IHR5cGUgYW5kIHN0b3Agc3RyaW5nc1xuICAgIGNvbnN0IFssIHR5cGUsIGNvbnRlbnRdID0gc3RyLm1hdGNoKC9eKFxcdyspLWdyYWRpZW50XFwoKC4qKVxcKSQvaSkgfHwgW107XG4gICAgaWYgKCF0eXBlIHx8ICFjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHJhd3N0b3BzID0gWy4uLm1hdGNoQWxsKGNvbnRlbnQsIC8ocmdiYT9cXCguKj9cXCl8Iz9cXHcrKSguKj8pKD89LHwkKS9naSldO1xuICAgIGNvbnN0IHN0b3BzID0gW107XG4gICAgbGV0IG1vZGlmaWVyID0gbnVsbDtcblxuICAgIC8vIFBhcnNlIHJhdyBzdG9wIHN0cmluZ3NcbiAgICBsZXQgbGFzdENvbG9yID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhd3N0b3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IFtmdWxsLCByYywgcmxdID0gcmF3c3RvcHNbaV07XG4gICAgICAgIGNvbnN0IGNvbG9yID0gcGFyc2VDb2xvcihyYyk7XG4gICAgICAgIGNvbnN0IGxvY3MgPSBybFxuICAgICAgICAgICAgLnNwbGl0KC9cXHMrL2cpXG4gICAgICAgICAgICAubWFwKCh2KSA9PiBtYXRjaCh2LCAvXi0/KFxcZCooXFwuXFxkKyk/KSUkLywgMSkpXG4gICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAubWFwKE51bWJlcik7XG5cbiAgICAgICAgaWYgKCFsb2NzLmxlbmd0aCAmJiBjb2xvcikge1xuICAgICAgICAgICAgc3RvcHMucHVzaCh7IGxvYzogbnVsbCwgY29sb3IgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbG9jIG9mIGxvY3MpIHtcbiAgICAgICAgICAgICAgICBzdG9wcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbG9jLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IgfHwgbGFzdENvbG9yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFtb2RpZmllcikge1xuICAgICAgICAgICAgbW9kaWZpZXIgPSBmdWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENvbG9yID0gY29sb3IgfHwgbGFzdENvbG9yO1xuICAgIH1cblxuICAgIGlmICghc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV0ubG9jKSB7XG4gICAgICAgIHN0b3BzW3N0b3BzLmxlbmd0aCAtIDFdLmxvYyA9IDEwMDtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIGdhcHNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0b3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0b3AgPSBzdG9wc1tpXTtcblxuICAgICAgICBpZiAoIXN0b3AubG9jKSB7XG4gICAgICAgICAgICBpZiAoIWkpIHtcbiAgICAgICAgICAgICAgICBzdG9wLmxvYyA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBkaXZpZGVyID0gMjtcbiAgICAgICAgICAgICAgICBsZXQgaiA9IGkgKyAxO1xuXG4gICAgICAgICAgICAgICAgZm9yICg7IGogPCBzdG9wcy5sZW5ndGggJiYgIXN0b3BzW2pdLmxvYzsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpdmlkZXIrKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdG9wLmxvYyA9IHN0b3BzW2kgLSAxXS5sb2MgKyAoc3RvcHNbal0ubG9jIC0gc3RvcHNbaSAtIDFdLmxvYykgLyBkaXZpZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RyLFxuICAgICAgICB0eXBlLFxuICAgICAgICBtb2RpZmllcixcbiAgICAgICAgc3RvcHMsXG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKHN0cikgPT4ge1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodHMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlR3JhZGllbnQoc3RyKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRzKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0ICcuLi9zY3NzL19tYWluLnNjc3MnO1xuXG5pbXBvcnQgUGlja3IgZnJvbSAnQHNpbW9ud2VwL3BpY2tyJztcblxuaW1wb3J0IGJ1aWxkR1BpY2tyIGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHNpbXBsaWZ5RXZlbnQgZnJvbSAnLi91dGlscy9zaW1wbGlmeUV2ZW50JztcbmltcG9ydCBwYXJzZUdyYWRpZW50IGZyb20gJy4vdXRpbHMvcGFyc2VHcmFkaWVudCc7XG5cbmNvbnN0IEZPQ1VTRURfU1RPUCA9ICdmb2N1c2VkLXN0b3AnO1xuXG5jb25zdCB7IHV0aWxzIH0gPSBQaWNrcjtcbmNvbnN0IHsgb24sIG9mZiB9ID0gdXRpbHM7XG5cbmNvbnN0IHNldERlZmF1bHRzID0gKG9wdCkgPT4ge1xuICAgIGNvbnN0IHBpY2tyID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gY29sb3IgZm9ybWF0c1xuICAgICAgICAgICAgY215azogZmFsc2UsXG4gICAgICAgICAgICBoZXg6IGZhbHNlLFxuICAgICAgICAgICAgaHNsYTogZmFsc2UsXG4gICAgICAgICAgICBoc3ZhOiBmYWxzZSxcbiAgICAgICAgICAgIHJnYmE6IHRydWUsXG5cbiAgICAgICAgICAgIGNhbmNlbDogZmFsc2UsXG4gICAgICAgICAgICBjbGVhcjogZmFsc2UsXG4gICAgICAgICAgICBzYXZlOiBmYWxzZSxcblxuICAgICAgICAgICAgaW5wdXQ6IHRydWUsXG4gICAgICAgICAgICBzd2F0Y2hlczogW10sXG4gICAgICAgICAgICB0aGVtZTogJ2NsYXNzaWMnLFxuICAgICAgICAgICAgcHJldmlldzogdHJ1ZSxcbiAgICAgICAgICAgIG9wYWNpdHk6IHRydWUsXG4gICAgICAgICAgICBodWU6IHRydWUsXG4gICAgICAgICAgICBwYWxldHRlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBvcHQucGlja3JcbiAgICApO1xuXG4gICAgZGVsZXRlIG9wdC5waWNrcjtcblxuICAgIGlmICghb3B0LmFuZ2xlKSBvcHQuYW5nbGUgPSAwO1xuICAgIGlmICghb3B0Lm1vZGUpIG9wdC5tb2RlID0gJ2xpbmVhcic7XG4gICAgaWYgKCFvcHQuc3RvcHMpXG4gICAgICAgIG9wdC5zdG9wcyA9IFtcbiAgICAgICAgICAgIFsnIzQyNDQ1YScsIDBdLFxuICAgICAgICAgICAgWycjMjBiNmRkJywgMV0sXG4gICAgICAgIF07XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gZ3JhZGllbnQgdHlwZXNcbiAgICAgICAgICAgIGNvbmljOiBmYWxzZSxcbiAgICAgICAgICAgIGxpbmVhcjogdHJ1ZSxcbiAgICAgICAgICAgIHJhZGlhbDogdHJ1ZSxcblxuICAgICAgICAgICAgbG9ja09wYWNpdHk6IGZhbHNlLFxuICAgICAgICAgICAgcGlja3IsXG4gICAgICAgIH0sXG4gICAgICAgIG9wdFxuICAgICk7XG59O1xuXG5jbGFzcyBHUGlja3Ige1xuICAgIC8vIEdyYWRpZW50IHByb3BzXG4gICAgX3N0b3BzID0gW107XG5cbiAgICAvLyBMaW5lYXIgYW5nbGVcbiAgICBfYW5nbGUgPSAwO1xuICAgIF9hbmdsZXMgPSBbXG4gICAgICAgIHsgYW5nbGU6IDAsIG5hbWU6ICd0byB0b3AnIH0sXG4gICAgICAgIHsgYW5nbGU6IDkwLCBuYW1lOiAndG8gcmlnaHQnIH0sXG4gICAgICAgIHsgYW5nbGU6IDE4MCwgbmFtZTogJ3RvIGJvdHRvbScgfSxcbiAgICAgICAgeyBhbmdsZTogMjcwLCBuYW1lOiAndG8gbGVmdCcgfSxcbiAgICAgICAgeyBhbmdsZTogNDUsIG5hbWU6ICd0byB0b3AgcmlnaHQnIH0sXG4gICAgICAgIHsgYW5nbGU6IDQ1LCBuYW1lOiAndG8gcmlnaHQgdG9wJyB9LFxuICAgICAgICB7IGFuZ2xlOiAxMzUsIG5hbWU6ICd0byByaWdodCBib3R0b20nIH0sXG4gICAgICAgIHsgYW5nbGU6IDEzNSwgbmFtZTogJ3RvIGJvdHRvbSByaWdodCcgfSxcbiAgICAgICAgeyBhbmdsZTogMjI1LCBuYW1lOiAndG8gbGVmdCBib3R0b20nIH0sXG4gICAgICAgIHsgYW5nbGU6IDIyNSwgbmFtZTogJ3RvIGJvdHRvbSBsZWZ0JyB9LFxuICAgICAgICB7IGFuZ2xlOiAzMTUsIG5hbWU6ICd0byB0b3AgbGVmdCcgfSxcbiAgICAgICAgeyBhbmdsZTogMzE1LCBuYW1lOiAndG8gbGVmdCB0b3AnIH0sXG4gICAgXTtcblxuICAgIC8vIFJhZGlhbCBkaXJlY3Rpb25cbiAgICBfZGlyZWN0aW9uID0gJ2NpcmNsZSBhdCBjZW50ZXInO1xuICAgIF9kaXJlY3Rpb25zID0gW1xuICAgICAgICB7IHBvczogJ3RsJywgY3NzOiAnY2lyY2xlIGF0IGxlZnQgdG9wJyB9LFxuICAgICAgICB7IHBvczogJ3RtJywgY3NzOiAnY2lyY2xlIGF0IGNlbnRlciB0b3AnIH0sXG4gICAgICAgIHsgcG9zOiAndHInLCBjc3M6ICdjaXJjbGUgYXQgcmlnaHQgdG9wJyB9LFxuICAgICAgICB7IHBvczogJ3InLCBjc3M6ICdjaXJjbGUgYXQgcmlnaHQnIH0sXG4gICAgICAgIHsgcG9zOiAnbScsIGNzczogJ2NpcmNsZSBhdCBjZW50ZXInIH0sXG4gICAgICAgIHsgcG9zOiAnbCcsIGNzczogJ2NpcmNsZSBhdCBsZWZ0JyB9LFxuICAgICAgICB7IHBvczogJ2JyJywgY3NzOiAnY2lyY2xlIGF0IHJpZ2h0IGJvdHRvbScgfSxcbiAgICAgICAgeyBwb3M6ICdibScsIGNzczogJ2NpcmNsZSBhdCBjZW50ZXIgYm90dG9tJyB9LFxuICAgICAgICB7IHBvczogJ2JsJywgY3NzOiAnY2lyY2xlIGF0IGxlZnQgYm90dG9tJyB9LFxuICAgIF07XG5cbiAgICBfZm9jdXNlZFN0b3AgPSBudWxsO1xuICAgIF9tb2RlID0gJ2xpbmVhcic7XG4gICAgX21vZGVzID0gW107XG4gICAgX3Jvb3QgPSBudWxsO1xuICAgIF9ldmVudExpc3RlbmVyID0ge1xuICAgICAgICBpbml0OiBbXSxcbiAgICAgICAgY2hhbmdlOiBbXSxcbiAgICAgICAgY29sb3JDaGFuZ2U6IFtdLFxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcihvcHQpIHtcbiAgICAgICAgb3B0ID0gc2V0RGVmYXVsdHMob3B0KTtcblxuICAgICAgICAvLyBCdWlsZCBkb21cbiAgICAgICAgdGhpcy5fcm9vdCA9IGJ1aWxkR1BpY2tyKG9wdCk7XG5cbiAgICAgICAgaWYgKG9wdC5hbmdsZSkgdGhpcy5fYW5nbGUgPSBvcHQuYW5nbGU7XG5cbiAgICAgICAgaWYgKG9wdC5yYWRpYWwpIHRoaXMuX21vZGVzLnB1c2goJ3JhZGlhbCcpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIGNvbmljLWdyYWRpZW50IGlzIHN1cHBvcnRlZFxuICAgICAgICBpZiAob3B0LmNvbmljICYmIENTUy5zdXBwb3J0cygnYmFja2dyb3VuZC1pbWFnZScsICdjb25pYy1ncmFkaWVudCgjZmZmLCAjZmZmKScpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb2Rlcy5wdXNoKCdjb25pYycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdC5saW5lYXIgfHwgdGhpcy5fbW9kZXMubGVuZ3RoID09PSAwKSB0aGlzLl9tb2Rlcy5wdXNoKCdsaW5lYXInKTtcblxuICAgICAgICBpZiAob3B0Lm1vZGUgJiYgdGhpcy5fbW9kZXMuaW5kZXhPZihvcHQubW9kZSkgIT09IC0xKSB0aGlzLl9tb2RlID0gb3B0Lm1vZGU7XG5cbiAgICAgICAgb3B0LmVsID0gb3B0LmVsLnNwbGl0KC8+Pi9nKS5yZWR1Y2UoKHB2LCBjdiwgY2ksIGEpID0+IHtcbiAgICAgICAgICAgIHB2ID0gcHYucXVlcnlTZWxlY3Rvcihjdik7XG4gICAgICAgICAgICByZXR1cm4gY2kgPCBhLmxlbmd0aCAtIDEgPyBwdi5zaGFkb3dSb290IDogcHY7XG4gICAgICAgIH0sIGRvY3VtZW50KTtcblxuICAgICAgICBvcHQuZWwucGFyZW50RWxlbWVudC5yZXBsYWNlQ2hpbGQodGhpcy5fcm9vdC5yb290LCBvcHQuZWwpO1xuXG4gICAgICAgIHRoaXMuX3BpY2tyID0gUGlja3IuY3JlYXRlKHtcbiAgICAgICAgICAgIGVsOiB0aGlzLl9yb290LnBpY2tyLFxuICAgICAgICAgICAgdGhlbWU6IG9wdC5waWNrci50aGVtZSxcbiAgICAgICAgICAgIGlubGluZTogdHJ1ZSxcbiAgICAgICAgICAgIHVzZUFzQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgc2hvd0Fsd2F5czogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHRSZXByZXNlbnRhdGlvbjogJ0hFWEEnLFxuICAgICAgICAgICAgc3dhdGNoZXM6IG9wdC5waWNrci5zd2F0Y2hlcyxcbiAgICAgICAgICAgIGxvY2tPcGFjaXR5OiBvcHQucGlja3IubG9ja09wYWNpdHksXG5cbiAgICAgICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgICAgICBwYWxldHRlOiBvcHQucGlja3IucGFsZXR0ZSxcbiAgICAgICAgICAgICAgICBwcmV2aWV3OiBvcHQucGlja3IucHJldmlldyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcHQucGlja3Iub3BhY2l0eSxcbiAgICAgICAgICAgICAgICBodWU6IG9wdC5waWNrci5odWUsXG5cbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dDogb3B0LnBpY2tyLmlucHV0LFxuICAgICAgICAgICAgICAgICAgICBoZXg6IG9wdC5waWNrci5oZXgsXG4gICAgICAgICAgICAgICAgICAgIHJnYmE6IG9wdC5waWNrci5yZ2JhLFxuICAgICAgICAgICAgICAgICAgICBjbXlrOiBvcHQucGlja3IuY215ayxcbiAgICAgICAgICAgICAgICAgICAgaHNsYTogb3B0LnBpY2tyLmhzbGEsXG4gICAgICAgICAgICAgICAgICAgIGhzdmE6IG9wdC5waWNrci5oc3ZhLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWw6IG9wdC5waWNrci5jYW5jZWwsXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyOiBvcHQucGlja3IuY2xlYXIsXG4gICAgICAgICAgICAgICAgICAgIHNhdmU6IG9wdC5waWNrci5zYXZlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdjaGFuZ2UnLCAoY29sb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZm9jdXNlZFN0b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNlZFN0b3AuY29sb3IgPSBjb2xvci50b1JHQkEoKS50b1N0cmluZygwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignaW5pdCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgcHJlLWRlZmluZWQgc3dhdGNoZXNcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtjb2xvciwgbG9jXSBvZiBvcHQuc3RvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRTdG9wKGNvbG9yLCBsb2MsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KCdpbml0JywgdGhpcyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYmluZEV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgeyBncmFkaWVudCB9ID0gdGhpcy5fcm9vdDtcblxuICAgICAgICAvLyBTd2l0Y2ggZ3JhZGllbnQgbW9kZVxuICAgICAgICBvbihncmFkaWVudC5tb2RlLCBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSB0aGlzLl9tb2Rlcy5pbmRleE9mKHRoaXMuX21vZGUpICsgMTtcbiAgICAgICAgICAgIHRoaXMuX21vZGUgPSB0aGlzLl9tb2Rlc1tuZXh0SW5kZXggPT09IHRoaXMuX21vZGVzLmxlbmd0aCA/IDAgOiBuZXh0SW5kZXhdO1xuXG4gICAgICAgICAgICAvLyBSZXBhaW50XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcblxuICAgICAgICAgICAgLy8gUHJldmVudCBzb21lIHRoaW5nc1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWRkaW5nIG5ldyBzdG9wc1xuICAgICAgICBvbihncmFkaWVudC5zdG9wcy5wcmV2aWV3LCAnY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRTdG9wKFxuICAgICAgICAgICAgICAgIHRoaXMuX3BpY2tyLmdldENvbG9yKCkudG9SR0JBKCkudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvbHZlQ29sb3JTdG9wUG9zaXRpb24oZS5wYWdlWClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkanVzdGluZyB0aGUgYW5nbGVcbiAgICAgICAgb24oZ3JhZGllbnQucmVzdWx0LCBbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9tb2RlICE9PSAnbGluZWFyJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ3JhZGllbnQuYW5nbGUuY2xhc3NMaXN0LmFkZChgZ3Bjci1hY3RpdmVgKTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBvbih3aW5kb3csIFsnbW91c2Vtb3ZlJywgJ3RvdWNobW92ZSddLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gc2ltcGxpZnlFdmVudChlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3ggPSBncmFkaWVudC5hbmdsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBhbmdsZSByZWxhdGl2ZSB0byB0aGUgY2VudGVyXG4gICAgICAgICAgICAgICAgY29uc3QgYm94Y3ggPSBib3gubGVmdCArIGJveC53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgYm94Y3kgPSBib3gudG9wICsgYm94LmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgcmFkaWFucyA9IE1hdGguYXRhbjIoeCAtIGJveGN4LCB5IC0gYm94Y3kpIC0gTWF0aC5QSTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWdyZWVzID0gTWF0aC5hYnMoKHJhZGlhbnMgKiAxODApIC8gTWF0aC5QSSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjdHJsIGFuZCBzaGlmdCBjYW4gYmUgdXNlZCB0byBkaXZpZGUgLyBxdWFydGVyIHRoZSBzbmFwcGluZyBwb2ludHNcbiAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBbMSwgMiwgNF1bTnVtYmVyKGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5ICogMildO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZWFyQW5nbGUoZGVncmVlcyAtIChkZWdyZWVzICUgKDQ1IC8gZGl2KSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHMgPSBvbih3aW5kb3csIFsnbW91c2V1cCcsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZ3JhZGllbnQuYW5nbGUuY2xhc3NMaXN0LnJlbW92ZShgZ3Bjci1hY3RpdmVgKTtcbiAgICAgICAgICAgICAgICBvZmYoLi4ubSk7XG4gICAgICAgICAgICAgICAgb2ZmKC4uLnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkdXN0aW5nIGNpcmNsZSBwb3NpdGlvblxuICAgICAgICBvbihncmFkaWVudC5wb3MsIFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSwgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1wb3MnKTtcbiAgICAgICAgICAgIGNvbnN0IHBhaXIgPSB0aGlzLl9kaXJlY3Rpb25zLmZpbmQoKHYpID0+IHYucG9zID09PSBwb3MpO1xuICAgICAgICAgICAgdGhpcy5zZXRSYWRpYWxQb3NpdGlvbigocGFpciAmJiBwYWlyLmNzcykgfHwgdGhpcy5fZGlyZWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2dldEFuZ2xlRnJvbVN0cmluZyhzdHIpIHtcbiAgICAgICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5fYW5nbGVzLmZpbmQoKGFuZykgPT4gYW5nLm5hbWUgPT09IHN0cik7XG4gICAgICAgIHJldHVybiBhbmdsZSA/IGFuZ2xlLmFuZ2xlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIF9yZW5kZXIoc2lsZW50ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3RvcHM6IHsgcHJldmlldyB9LFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgYXJyb3csXG4gICAgICAgICAgICBhbmdsZSxcbiAgICAgICAgICAgIHBvcyxcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgIH0gPSB0aGlzLl9yb290LmdyYWRpZW50O1xuICAgICAgICBjb25zdCB7IF9zdG9wcywgX21vZGUsIF9hbmdsZSB9ID0gdGhpcztcbiAgICAgICAgX3N0b3BzLnNvcnQoKGEsIGIpID0+IGEubG9jIC0gYi5sb2MpO1xuXG4gICAgICAgIGZvciAoY29uc3QgeyBjb2xvciwgZWwsIGxvYyB9IG9mIF9zdG9wcykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbC5zdHlsZSwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGAke2xvYyAqIDEwMH0lYCxcbiAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUm90YXRlIGFycm93XG4gICAgICAgIGNvbnN0IGFycm93RGlyID1cbiAgICAgICAgICAgIHR5cGVvZiBfYW5nbGUgPT09ICdudW1iZXInID8gX2FuZ2xlIDogdGhpcy5fZ2V0QW5nbGVGcm9tU3RyaW5nKF9hbmdsZSkgfHwgMDtcbiAgICAgICAgYXJyb3cuc3R5bGUudHJhbnNmb3JtID0gYHJvdGF0ZSgke2Fycm93RGlyIC0gOTB9ZGVnKWA7XG5cbiAgICAgICAgLy8gQXBwbHkgZ3JhZGllbnQgYW5kIHVwZGF0ZSByZXN1bHRcbiAgICAgICAgcHJldmlldy5zdHlsZS5iYWNrZ3JvdW5kID0gYGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJHt0aGlzLmdldFN0b3BzKCkudG9TdHJpbmcoXG4gICAgICAgICAgICAnbGluZWFyJ1xuICAgICAgICApfSlgO1xuICAgICAgICByZXN1bHQuc3R5bGUuYmFja2dyb3VuZCA9IHRoaXMuZ2V0R3JhZGllbnQoKS50b1N0cmluZygpO1xuXG4gICAgICAgIC8vIFNob3cgLyBoaWRlIGFuZ2xlIGNvbnRyb2wuIFVwZGF0ZSBzd2l0Y2ggYnV0dG9uXG4gICAgICAgIHBvcy5zdHlsZS5vcGFjaXR5ID0gX21vZGUgPT09ICdyYWRpYWwnID8gJycgOiAnMCc7XG4gICAgICAgIHBvcy5zdHlsZS52aXNpYmlsaXR5ID0gX21vZGUgPT09ICdyYWRpYWwnID8gJycgOiAnaGlkZGVuJztcbiAgICAgICAgYW5nbGUuc3R5bGUub3BhY2l0eSA9IF9tb2RlID09PSAnbGluZWFyJyA/ICcnIDogJzAnO1xuICAgICAgICBhbmdsZS5zdHlsZS52aXNpYmlsaXR5ID0gX21vZGUgPT09ICdsaW5lYXInID8gJycgOiAnaGlkZGVuJztcblxuICAgICAgICBtb2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1tb2RlJywgX21vZGUpO1xuXG4gICAgICAgIC8vIEZpcmUgZXZlbnRcbiAgICAgICAgIXNpbGVudCAmJiB0aGlzLl9lbWl0KCdjaGFuZ2UnLCB0aGlzKTtcbiAgICB9XG5cbiAgICBfcmVzb2x2ZUNvbG9yU3RvcFBvc2l0aW9uKHgpIHtcbiAgICAgICAgY29uc3QgeyBtYXJrZXJzIH0gPSB0aGlzLl9yb290LmdyYWRpZW50LnN0b3BzO1xuICAgICAgICBjb25zdCBtYmNyID0gbWFya2Vycy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgZGlmZiA9IHggLSBtYmNyLmxlZnQ7XG5cbiAgICAgICAgbGV0IGxvYyA9IGRpZmYgLyBtYmNyLndpZHRoO1xuICAgICAgICBpZiAobG9jIDwgMCkgbG9jID0gMDtcbiAgICAgICAgaWYgKGxvYyA+IDEpIGxvYyA9IDE7XG5cbiAgICAgICAgcmV0dXJuIGxvYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgc3RvcFxuICAgICAqIEBwYXJhbSBjb2xvciBTdG9wIGNvbG9yXG4gICAgICogQHBhcmFtIGxvYyBMb2NhdGlvbiBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKiBAcGFyYW0gc2lsZW50XG4gICAgICogQHJldHVybnMge0dQaWNrcn1cbiAgICAgKi9cbiAgICBhZGRTdG9wKGNvbG9yLCBsb2MgPSAwLjUsIHNpbGVudCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHsgbWFya2VycyB9ID0gdGhpcy5fcm9vdC5ncmFkaWVudC5zdG9wcztcbiAgICAgICAgY29uc3QgZWwgPSB1dGlscy5jcmVhdGVFbGVtZW50RnJvbVN0cmluZygnPGRpdiBjbGFzcz1cImdwY3ItbWFya2VyXCI+PC9kaXY+Jyk7XG4gICAgICAgIG1hcmtlcnMuYXBwZW5kQ2hpbGQoZWwpO1xuXG4gICAgICAgIGNvbnN0IHN0b3AgPSB7XG4gICAgICAgICAgICBlbCxcbiAgICAgICAgICAgIGxvYyxcbiAgICAgICAgICAgIGNvbG9yLFxuXG4gICAgICAgICAgICBsaXN0ZW5lcjogb24oZWwsIFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFya2Vyc2JjciA9IG1hcmtlcnMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGb2N1c2VkU3RvcChzdG9wKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9waWNrci5zZXRDb2xvcihzdG9wLmNvbG9yKTtcbiAgICAgICAgICAgICAgICBsZXQgaGlkZGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIG1vdXNlIC8gdG91Y2ggbW92ZW1lbnRzXG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IG9uKHdpbmRvdywgWydtb3VzZW1vdmUnLCAndG91Y2htb3ZlJ10sIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gc2ltcGxpZnlFdmVudChlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9vdERpc3RhbmNlID0gTWF0aC5hYnMoeSAtIG1hcmtlcnNiY3IueSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgdGhlIHVzZXIgdG8gcmVtb3ZlIHRoZSBjdXJyZW50IHN0b3Agd2l0aCB0cnlpbmcgdG8gZHJhZyB0aGUgc3RvcCBhd2F5XG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbiA9IHJvb3REaXN0YW5jZSA+IDUwICYmIHRoaXMuX3N0b3BzLmxlbmd0aCA+IDI7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBoaWRkZW4gPyAnMCcgOiAnMSc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3AubG9jID0gdGhpcy5fcmVzb2x2ZUNvbG9yU3RvcFBvc2l0aW9uKHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIHVwIGFmdGVyIGludGVyYWN0aW9uIGVuZFxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBvbih3aW5kb3csIFsnbW91c2V1cCcsICd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9mZiguLi5tKTtcbiAgICAgICAgICAgICAgICAgICAgb2ZmKC4uLnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGhpZGRlbiwgd2hpY2ggbWVhbnMgdGhlIHVzZXIgd2FudHMgdG8gcmVtb3ZlIGl0LCByZW1vdmUgdGhlIGN1cnJlbnQgc3RvcFxuICAgICAgICAgICAgICAgICAgICBpZiAoaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0b3Aoc3RvcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHRoaXMuX2ZvY3VzZWRTdG9wID0gc3RvcDtcbiAgICAgICAgdGhpcy5zZXRGb2N1c2VkU3RvcChzdG9wKTtcbiAgICAgICAgdGhpcy5fc3RvcHMucHVzaChzdG9wKTtcblxuICAgICAgICB0aGlzLl9waWNrci5zZXRDb2xvcihjb2xvcik7XG4gICAgICAgIGNvbG9yID0gdGhpcy5fcGlja3IuZ2V0Q29sb3IoKS50b1JHQkEoKS50b1N0cmluZygwKTtcblxuICAgICAgICB0aGlzLl9yZW5kZXIoc2lsZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0Rm9jdXNlZFN0b3Aoc3RvcCkge1xuICAgICAgICB0aGlzLl9zdG9wcy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgICAgICBzLmVsLmNsYXNzTGlzdC5jb250YWlucyhGT0NVU0VEX1NUT1ApICYmIHMuZWwuY2xhc3NMaXN0LnJlbW92ZShGT0NVU0VEX1NUT1ApO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RvcC5lbC5jbGFzc0xpc3QuYWRkKEZPQ1VTRURfU1RPUCk7XG4gICAgICAgIHRoaXMuX2ZvY3VzZWRTdG9wID0gc3RvcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgc3RvcC5cbiAgICAgKiBAcGFyYW0gdiBMb2NhdGlvbiwgY29sb3Igb3Igc3RvcCBvYmplY3RcbiAgICAgKi9cbiAgICByZW1vdmVTdG9wKHYpIHtcbiAgICAgICAgY29uc3QgeyBfc3RvcHMgfSA9IHRoaXM7XG5cbiAgICAgICAgY29uc3Qgc3RvcCA9ICgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdG9wcy5maW5kKCh2KSA9PiB2LmxvYyA9PT0gdik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3RvcHMuZmluZCgodikgPT4gdi5jb2xvciA9PT0gdik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBzdG9wIGZyb20gbGlzdFxuICAgICAgICBfc3RvcHMuc3BsaWNlKF9zdG9wcy5pbmRleE9mKHN0b3ApLCAxKTtcblxuICAgICAgICAvLyBSZW1vdmUgc3RvcCBlbGVtZW50XG4gICAgICAgIHN0b3AuZWwucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gVW5iaW5kIGxpc3RlbmVyXG4gICAgICAgIG9mZiguLi5zdG9wLmxpc3RlbmVyKTtcblxuICAgICAgICAvLyBGb2N1cyBhbm90aGVyIHN0b3Agc2luY2UgdGhlIGN1cnJlbnQgb25lIG1heSBnb25lXG4gICAgICAgIGlmICh0aGlzLl9mb2N1c2VkU3RvcCA9PT0gc3RvcCkge1xuICAgICAgICAgICAgdGhpcy5zZXRGb2N1c2VkU3RvcChfc3RvcHNbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuXG4gICAgY2xlYXJTdG9wcygpIHtcbiAgICAgICAgdGhpcy5fc3RvcHMuZm9yRWFjaCgoc3RvcCkgPT4gdGhpcy5yZW1vdmVTdG9wKHN0b3ApKTtcbiAgICB9XG5cbiAgICByZXBsYWNlU3RvcHMoc3RvcHMpIHtcbiAgICAgICAgaWYgKHN0b3BzKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyU3RvcHMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2NvbG9yLCBsb2NdIG9mIHN0b3BzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTdG9wKGNvbG9yLCBsb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZXMgdG8gcGFyc2UgYSBleGlzdGluZyBncmFkaWVudCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHN0ciBncmFkaWVudCBzdHJpbmdcbiAgICAgKi9cbiAgICBzZXRHcmFkaWVudChzdHIpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VHcmFkaWVudChzdHIpO1xuXG4gICAgICAgIGlmICghcGFyc2VkIHx8IHBhcnNlZC5zdG9wcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHR5cGUsIHN0b3BzLCBtb2RpZmllciB9ID0gcGFyc2VkO1xuICAgICAgICBjb25zdCBvbGRTdG9wcyA9IFsuLi50aGlzLl9zdG9wc107XG4gICAgICAgIGlmICh0aGlzLl9tb2Rlcy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICAgICAgdGhpcy5fbW9kZSA9IHR5cGU7XG5cbiAgICAgICAgICAgIC8vIEFwcGx5IG5ldyBzdG9wc1xuICAgICAgICAgICAgZm9yIChjb25zdCBzdG9wIG9mIHN0b3BzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTdG9wKHN0b3AuY29sb3IsIHN0b3AubG9jIC8gMTAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGN1cnJlbnQgc3RvcHNcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3RvcCBvZiBvbGRTdG9wcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RvcChzdG9wKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdsaW5lYXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYW5nbGUgPSAxODA7IC8vIERlZmF1bHQgdmFsdWVcbiAgICAgICAgICAgICAgICBtb2RpZmllciAmJiB0aGlzLnNldExpbmVhckFuZ2xlKG1vZGlmaWVyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSAnY2lyY2xlIGF0IGNlbnRlcic7IC8vIERlZmF1bHQgdmFsdWVcbiAgICAgICAgICAgICAgICBtb2RpZmllciAmJiB0aGlzLnNldFJhZGlhbFBvc2l0aW9uKG1vZGlmaWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZ3JhZGllbnQgYXMgY3NzIGJhY2tncm91bmQgc3RyaW5nXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRHcmFkaWVudChtb2RlID0gdGhpcy5fbW9kZSkge1xuICAgICAgICBjb25zdCBsaW5lYXJTdG9wcyA9IHRoaXMuZ2V0U3RvcHMoKS50b1N0cmluZyhtb2RlKTtcblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2xpbmVhcic6XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9hbmdsZSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgbGluZWFyLWdyYWRpZW50KCR7dGhpcy5fYW5nbGV9ZGVnLCAke2xpbmVhclN0b3BzfSlgO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fYW5nbGUgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYGxpbmVhci1ncmFkaWVudCgke3RoaXMuX2FuZ2xlfSwgJHtsaW5lYXJTdG9wc30pYDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JhZGlhbCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGByYWRpYWwtZ3JhZGllbnQoJHt0aGlzLl9kaXJlY3Rpb259LCAke2xpbmVhclN0b3BzfSlgO1xuICAgICAgICAgICAgY2FzZSAnY29uaWMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBgY29uaWMtZ3JhZGllbnQoJHtsaW5lYXJTdG9wc30pYDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc3RvcHMuXG4gICAgICogVG8gdG9TdHJpbmcgZnVuY3Rpb24gaXMgb3ZlcnJpZGRlbiBhbmQgcmV0dXJucyB0aGUgY29tbWEtam9pbmVkIHZlcnNpb24gd2hpY2hcbiAgICAgKiBjYW4gYmUgdXNlZCB0byBjdXN0aW1pemUgdGhlIGRpcmVjdGlvbiBha2EgYW5nbGUuXG4gICAgICogQHJldHVybnMge3tjb2xvcjogKiwgbG9jYXRpb246ICp9W119XG4gICAgICovXG4gICAgZ2V0U3RvcHMoKSB7XG4gICAgICAgIGNvbnN0IHN0b3BzID0gdGhpcy5fc3RvcHMubWFwKCh2KSA9PiAoe1xuICAgICAgICAgICAgY29sb3I6IHYuY29sb3IsXG4gICAgICAgICAgICBsb2NhdGlvbjogdi5sb2MsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBjb25zdCBtb2RlID0gdGhpcy5fbW9kZTtcbiAgICAgICAgc3RvcHMudG9TdHJpbmcgPSBmdW5jdGlvbiAodHlwZSA9IG1vZGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAncmFkaWFsJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwKCh2KSA9PiBgJHt2LmNvbG9yfSAke3YubG9jYXRpb24gKiAxMDB9JWApLmpvaW4oJywnKTtcbiAgICAgICAgICAgICAgICBjYXNlICdjb25pYyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcCgodikgPT4gYCR7di5jb2xvcn0gJHt2LmxvY2F0aW9uICogMzYwfWRlZ2ApLmpvaW4oJywnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc3RvcHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBhbmdsZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldExpbmVhckFuZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9kZSA9PT0gJ2xpbmVhcicgPyB0aGlzLl9hbmdsZSA6IC0xO1xuICAgIH1cblxuICAgIGlzVmFsaWREaXJlY3Rpb25TdHJpbmcoZGlyKSB7XG4gICAgICAgIGNvbnN0IHNpZGVPckNvcm5lciA9IC9edG8gKGxlZnQgKHRvcHxib3R0b20pfHJpZ2h0ICh0b3B8Ym90dG9tKXxsZWZ0fHJpZ2h0fHRvcHxib3R0b20pL2k7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gZGlyLm1hdGNoKHNpZGVPckNvcm5lcik7XG4gICAgICAgIHJldHVybiAhIW1hdGNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuZXcgYW5nbGUsIGNhbiBiZSBhIG51bWJlciAoZGVncmVlcykgb3IgYW55IHZhbGlkIGNzcyBzdHJpbmcgbGlrZSAwLjIzdHVybiBvciBcInRvIGJvdHRvbVwiXG4gICAgICogQHBhcmFtIGFuZ2xlXG4gICAgICovXG4gICAgc2V0TGluZWFyQW5nbGUoYW5nbGUpIHtcbiAgICAgICAgYW5nbGUgPSB0eXBlb2YgYW5nbGUgPT09ICdudW1iZXInID8gYW5nbGUgOiB0aGlzLmlzVmFsaWREaXJlY3Rpb25TdHJpbmcoYW5nbGUpICYmIGFuZ2xlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYW5nbGUgPT09ICdudW1iZXInIHx8IHR5cGVvZiBhbmdsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuX2FuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuZXcgcmFkaWFsIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHBvc2l0aW9uXG4gICAgICovXG4gICAgc2V0UmFkaWFsUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgcGFpciA9IHRoaXMuX2RpcmVjdGlvbnMuZmluZCgodikgPT4gdi5jc3MgPT09IHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAoIXBhaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHBhaXIuY3NzO1xuXG4gICAgICAgIC8vIEFwcGx5IGNsYXNzXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgQXJyYXkuZnJvbSh0aGlzLl9yb290LmdyYWRpZW50LnBvcy5jaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGNoaWxkLmNsYXNzTGlzdFtjaGlsZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zJykgPT09IHBhaXIucG9zID8gJ2FkZCcgOiAncmVtb3ZlJ10oXG4gICAgICAgICAgICAgICAgJ2dwY3ItYWN0aXZlJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGRpcmVjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXRSYWRpYWxQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGUgPT09ICdyYWRpYWwnID8gdGhpcy5fZGlyZWN0aW9uIDogbnVsbDtcbiAgICB9XG5cbiAgICBzZXRNb2RlKG1vZGUpIHtcbiAgICAgICAgdGhpcy5fbW9kZSA9IG1vZGU7XG4gICAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cblxuICAgIF9lbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJbZXZlbnRdLmZvckVhY2goKGNiKSA9PiBjYiguLi5hcmdzLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBldmVudGxpc3RlbmVyXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIGNiXG4gICAgICogQHJldHVybnMge0dQaWNrcn1cbiAgICAgKi9cbiAgICBvbihldmVudCwgY2IpIHtcbiAgICAgICAgLy8gVmFsaWRhdGVcbiAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnICYmIGV2ZW50IGluIHRoaXMuX2V2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJbZXZlbnRdLnB1c2goY2IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBldmVudGxpc3RlbmVyXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICogQHBhcmFtIGNiXG4gICAgICogQHJldHVybnMge0dQaWNrcn1cbiAgICAgKi9cbiAgICBvZmYoZXZlbnQsIGNiKSB7XG4gICAgICAgIGNvbnN0IGNhbGxCYWNrcyA9IHRoaXMuX2V2ZW50TGlzdGVuZXJbZXZlbnRdO1xuXG4gICAgICAgIGlmIChjYWxsQmFja3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbEJhY2tzLmluZGV4T2YoY2IpO1xuXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XG4gICAgICAgICAgICAgICAgY2FsbEJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbi8vIEV4cG9zZSBwaWNrclxuR1BpY2tyLlBpY2tyID0gUGlja3I7XG5cbmV4cG9ydCBkZWZhdWx0IEdQaWNrcjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VUb0hTVkEgfSBmcm9tICdAc2ltb253ZXAvcGlja3Ivc3JjL2pzL3V0aWxzL2NvbG9yJztcbmltcG9ydCB7IEhTVmFDb2xvciB9IGZyb20gJ0BzaW1vbndlcC9waWNrci9zcmMvanMvdXRpbHMvaHN2YWNvbG9yJztcbmltcG9ydCBHcGlja3IgZnJvbSAnLi9ncGlja3InO1xuXG5jb25zdCBsaW5lYXJEaXJlY3Rpb25zID0ge1xuICAgIFRPX1RPUDogJ3RvIHRvcCcsXG4gICAgVE9fUklHSFQ6ICd0byByaWdodCcsXG4gICAgVE9fQk9UVE9NOiAndG8gYm90dG9tJyxcbiAgICBUT19MRUZUOiAndG8gbGVmdCcsXG4gICAgVE9fVE9QX1JJR0hUOiAndG8gdG9wIHJpZ2h0JyxcbiAgICBUT19UT1BfTEVGVDogJ3RvIHRvcCBsZWZ0JyxcbiAgICBUT19CT1RUT01fUklHSFQ6ICd0byBib3R0b20gcmlnaHQnLFxuICAgIFRPX0JPVFRPTV9MRUZUOiAndG8gYm90dG9tIGxlZnQnLFxufTtcblxuY29uc3QgY29sb3JUb0hleGEgPSAoY29sb3IpID0+IHtcbiAgICBjb25zdCBoc3ZhID0gcGFyc2VUb0hTVkEoY29sb3IpO1xuICAgIGNvbnN0IGhleGEgPSBIU1ZhQ29sb3IoLi4uaHN2YS52YWx1ZXMpXG4gICAgICAgIC50b0hFWEEoKVxuICAgICAgICAudG9TdHJpbmcoKTtcbiAgICByZXR1cm4geyBoZXhhLCB0eXBlOiBoc3ZhLnR5cGUgfTtcbn07XG5cbmNvbnN0IGNvbnZlcnRTdG9wc1RvSGV4YSA9IChzdG9wcykgPT5cbiAgICBzdG9wcy5tYXAoKHN0b3ApID0+ICh7IC4uLmNvbG9yVG9IZXhhKHN0b3AuY29sb3IpLCBsb2M6IHN0b3AubG9jIH0pKTtcblxuLy8gY29uc3QgYXJlU3RvcHNFcXVhbCA9IChzdG9wczEsIHN0b3BzMikgPT4ge1xuLy8gICAgIGlmICghc3RvcHMxIHx8ICFzdG9wczIgfHwgc3RvcHMxLmxlbmd0aCAhPT0gc3RvcHMyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuLy8gICAgIHJldHVybiBzdG9wczEuZXZlcnkoKHN0b3AsIGkpID0+IHN0b3AuaGV4YSA9PT0gc3RvcHMyW2ldLmhleGEgJiYgc3RvcC5sb2MgPT09IHN0b3BzMltpXS5sb2MpO1xuLy8gfTtcblxuY29uc3QgR3JhZGllbnRQaWNrZXIgPSAoeyBhbmdsZSwgbW9kZSwgb25DaGFuZ2UsIHBpY2tyLCBzZXRBbmdsZSwgc2V0TW9kZSwgc3RvcHMgfSkgPT4ge1xuICAgIGNvbnN0IFtncGlja3IsIHNldEdwaWNrcl0gPSB1c2VTdGF0ZSgpO1xuICAgIGNvbnN0IFtpbml0aWFsaXplZCwgc2V0SW5pdGlhbGl6ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgZ3BpY2tyUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKCFtb2RlKSB7XG4gICAgICAgICAgICBtb2RlID0gJ2xpbmVhcic7XG4gICAgICAgICAgICBpZiAoc2V0TW9kZSkgc2V0TW9kZShtb2RlKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChncGlja3JSZWYpIHtcbiAgICAgICAgICAgIHNldEdwaWNrcihcbiAgICAgICAgICAgICAgICBuZXcgR3BpY2tyKHtcbiAgICAgICAgICAgICAgICAgICAgZWw6ICcuZ3BpY2tyJyxcbiAgICAgICAgICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHN0b3BzLFxuICAgICAgICAgICAgICAgICAgICBwaWNrcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucGlja3IsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSkub24oJ2luaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldEluaXRpYWxpemVkKHRydWUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwgW2dwaWNrclJlZl0pO1xuXG4gICAgY29uc3Qgb25HcGlja3JDaGFuZ2UgPSAoaW5zdCkgPT4ge1xuICAgICAgICBpZiAoc2V0QW5nbGUgJiYgaW5zdC5fYW5nbGUgIT09IGFuZ2xlKSBzZXRBbmdsZShpbnN0Ll9hbmdsZSk7XG4gICAgICAgIGlmIChzZXRNb2RlICYmIGluc3QuX21vZGUgIT09IG1vZGUpIHtcbiAgICAgICAgICAgIHNldE1vZGUoaW5zdC5fbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgaGV4YVN0b3BzID0gY29udmVydFN0b3BzVG9IZXhhKGluc3QuX3N0b3BzKTtcbiAgICAgICAgLy8gc2V0U3RvcHMoaGV4YVN0b3BzKTtcblxuICAgICAgICBpZiAob25DaGFuZ2UpIG9uQ2hhbmdlKGluc3QpO1xuICAgIH07XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoZ3BpY2tyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBwYXNzIGRldGFpbHMgdG8gY2hhbmdlIGV2ZW50LCBub3QganVzdCBncGlja3IgaW5zdGFuY2U/XG4gICAgICAgICAgICBpZiAob25DaGFuZ2UpIGdwaWNrci5vbignY2hhbmdlJywgb25HcGlja3JDaGFuZ2UpO1xuICAgICAgICB9XG4gICAgfSwgW2dwaWNrcl0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGdwaWNrciAmJiBpbml0aWFsaXplZCAmJiBncGlja3IuX2FuZ2xlICE9PSBhbmdsZSkge1xuICAgICAgICAgICAgZ3BpY2tyLnNldExpbmVhckFuZ2xlKGFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0sIFtncGlja3IsIGluaXRpYWxpemVkLCBhbmdsZV0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGdwaWNrciAmJiBpbml0aWFsaXplZCAmJiBncGlja3IuX21vZGUgIT09IG1vZGUpIHtcbiAgICAgICAgICAgIGdwaWNrci5zZXRNb2RlKG1vZGUpO1xuICAgICAgICB9XG4gICAgfSwgW2dwaWNrciwgaW5pdGlhbGl6ZWQsIG1vZGVdKTtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImdwaWNrclwiIHJlZj17Z3BpY2tyUmVmfSAvPjtcbn07XG5cbkdyYWRpZW50UGlja2VyLnByb3BUeXBlcyA9IHtcbiAgICBhbmdsZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBtb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNldEFuZ2xlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXRNb2RlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzdG9wczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSlcbiAgICApLFxuICAgIHBpY2tyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICB0aGVtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgc3dhdGNoZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLFxuICAgICAgICBsb2NrT3BhY2l0eTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIHBhbGV0dGU6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBwcmV2aWV3OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgb3BhY2l0eTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGh1ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGlucHV0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaGV4OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgcmdiYTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGNteWs6IFByb3BUeXBlcy5ib29sLFxuICAgICAgICBoc2xhOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaHN2YTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGNhbmNlbDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGNsZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgc2F2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG59O1xuXG5HcmFkaWVudFBpY2tlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcGlja3I6IHtcbiAgICAgICAgdGhlbWU6ICduYW5vJyxcbiAgICB9LFxufTtcbmV4cG9ydCB7IEdyYWRpZW50UGlja2VyIGFzIGRlZmF1bHQsIGxpbmVhckRpcmVjdGlvbnMgfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iXSwic291cmNlUm9vdCI6IiJ9