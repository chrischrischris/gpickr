!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define("react-gpickr",["React","ReactDOM"],e):"object"==typeof exports?exports["react-gpickr"]=e(require("react"),require("react-dom")):t["react-gpickr"]=e(t.React,t.ReactDOM)}(window,(function(t,e){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="/dist/",o(o.s=8)}([function(t,e,o){t.exports=o(4)()},function(e,o){e.exports=t},function(t,e,o){
/*! Pickr 1.6.0 MIT | https://github.com/Simonwep/pickr */
window,t.exports=function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=1)}([function(t){t.exports=JSON.parse('{"a":"1.6.0"}')},function(t,e,o){"use strict";o.r(e);var n={};function r(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,n)}return o}function i(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?r(Object(o),!0).forEach((function(e){s(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function s(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function a(t,e,o,n,r={}){e instanceof HTMLCollection||e instanceof NodeList?e=Array.from(e):Array.isArray(e)||(e=[e]),Array.isArray(o)||(o=[o]);for(const s of e)for(const e of o)s[t](e,n,i({capture:!1},r));return Array.prototype.slice.call(arguments,1)}o.r(n),o.d(n,"on",(function(){return c})),o.d(n,"off",(function(){return l})),o.d(n,"createElementFromString",(function(){return p})),o.d(n,"createFromTemplate",(function(){return u})),o.d(n,"eventPath",(function(){return h})),o.d(n,"resolveElement",(function(){return d})),o.d(n,"adjustableInputNumbers",(function(){return f}));const c=a.bind(null,"addEventListener"),l=a.bind(null,"removeEventListener");function p(t){const e=document.createElement("div");return e.innerHTML=t.trim(),e.firstElementChild}function u(t){const e=(t,e)=>{const o=t.getAttribute(e);return t.removeAttribute(e),o},o=(t,n={})=>{const r=e(t,":obj"),i=e(t,":ref"),s=r?n[r]={}:n;i&&(n[i]=t);for(const n of Array.from(t.children)){const t=e(n,":arr"),r=o(n,t?{}:s);t&&(s[t]||(s[t]=[])).push(Object.keys(r).length?r:n)}return n};return o(p(t))}function h(t){let e=t.path||t.composedPath&&t.composedPath();if(e)return e;let o=t.target.parentElement;for(e=[t.target,o];o=o.parentElement;)e.push(o);return e.push(document,window),e}function d(t){return t instanceof Element?t:"string"==typeof t?t.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document):null}function f(t,e=(t=>t)){function o(o){const n=[.001,.01,.1][Number(o.shiftKey||2*o.ctrlKey)]*(o.deltaY<0?1:-1);let r=0,i=t.selectionStart;t.value=t.value.replace(/[\d.]+/g,(t,o)=>o<=i&&o+t.length>=i?(i=o,e(Number(t),n,r)):(r++,t)),t.focus(),t.setSelectionRange(i,i),o.preventDefault(),t.dispatchEvent(new Event("input"))}c(t,"focus",()=>c(window,"wheel",o,{passive:!1})),c(t,"blur",()=>l(window,"wheel",o))}var g=o(0);const{min:m,max:b,floor:_,round:v}=Math;function y(t,e,o){e/=100,o/=100;const n=_(t=t/360*6),r=t-n,i=o*(1-e),s=o*(1-r*e),a=o*(1-(1-r)*e),c=n%6;return[255*[o,s,i,i,a,o][c],255*[a,o,o,s,i,i][c],255*[i,i,a,o,o,s][c]]}function w(t,e,o){const n=(2-(e/=100))*(o/=100)/2;return 0!==n&&(e=1===n?0:n<.5?e*o/(2*n):e*o/(2-2*n)),[t,100*e,100*n]}function k(t,e,o){const n=m(t/=255,e/=255,o/=255),r=b(t,e,o),i=r-n;let s,a;if(0===i)s=a=0;else{a=i/r;const n=((r-t)/6+i/2)/i,c=((r-e)/6+i/2)/i,l=((r-o)/6+i/2)/i;t===r?s=l-c:e===r?s=1/3+n-l:o===r&&(s=2/3+c-n),s<0?s+=1:s>1&&(s-=1)}return[360*s,100*a,100*r]}function O(t,e,o,n){return e/=100,o/=100,[...k(255*(1-m(1,(t/=100)*(1-(n/=100))+n)),255*(1-m(1,e*(1-n)+n)),255*(1-m(1,o*(1-n)+n)))]}function S(t,e,o){e/=100;const n=2*(e*=(o/=100)<.5?o:1-o)/(o+e)*100,r=100*(o+e);return[t,isNaN(n)?0:n,r]}function C(t){return k(...t.match(/.{2}/g).map(t=>parseInt(t,16)))}function A(t=0,e=0,o=0,n=1){const r=(t,e)=>(o=-1)=>e(~o?t.map(t=>Number(t.toFixed(o))):t),i={h:t,s:e,v:o,a:n,toHSVA(){const t=[i.h,i.s,i.v,i.a];return t.toString=r(t,t=>"hsva(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(i.a,")")),t},toHSLA(){const t=[...w(i.h,i.s,i.v),i.a];return t.toString=r(t,t=>"hsla(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(i.a,")")),t},toRGBA(){const t=[...y(i.h,i.s,i.v),i.a];return t.toString=r(t,t=>"rgba(".concat(t[0],", ").concat(t[1],", ").concat(t[2],", ").concat(i.a,")")),t},toCMYK(){const t=function(t,e,o){const n=y(t,e,o),r=n[0]/255,i=n[1]/255,s=n[2]/255,a=m(1-r,1-i,1-s);return[100*(1===a?0:(1-r-a)/(1-a)),100*(1===a?0:(1-i-a)/(1-a)),100*(1===a?0:(1-s-a)/(1-a)),100*a]}(i.h,i.s,i.v);return t.toString=r(t,t=>"cmyk(".concat(t[0],"%, ").concat(t[1],"%, ").concat(t[2],"%, ").concat(t[3],"%)")),t},toHEXA(){const t=function(t,e,o){return y(t,e,o).map(t=>v(t).toString(16).padStart(2,"0"))}(i.h,i.s,i.v),e=i.a>=1?"":Number((255*i.a).toFixed(0)).toString(16).toUpperCase().padStart(2,"0");return e&&t.push(e),t.toString=()=>"#".concat(t.join("").toUpperCase()),t},clone:()=>A(i.h,i.s,i.v,i.a)};return i}const E=t=>Math.max(Math.min(t,1),0);function j(t){const e={options:Object.assign({lock:null,onchange:()=>0,onstop:()=>0},t),_keyboard(t){const{options:o}=e,{type:n,key:r}=t;if(document.activeElement===o.wrapper){const{lock:o}=e.options,i="ArrowUp"===r,s="ArrowRight"===r,a="ArrowDown"===r,c="ArrowLeft"===r;if("keydown"===n&&(i||s||a||c)){let n=0,r=0;"v"===o?n=i||s?1:-1:"h"===o?n=i||s?-1:1:(r=i?-1:a?1:0,n=c?-1:s?1:0),e.update(E(e.cache.x+.01*n),E(e.cache.y+.01*r)),t.preventDefault()}else r.startsWith("Arrow")&&(e.options.onstop(),t.preventDefault())}},_tapstart(t){c(document,["mouseup","touchend","touchcancel"],e._tapstop),c(document,["mousemove","touchmove"],e._tapmove),t.preventDefault(),e._tapmove(t)},_tapmove(t){const{options:o,cache:n}=e,{lock:r,element:i,wrapper:s}=o,a=s.getBoundingClientRect();let c=0,l=0;if(t){const e=t&&t.touches&&t.touches[0];c=t?(e||t).clientX:0,l=t?(e||t).clientY:0,c<a.left?c=a.left:c>a.left+a.width&&(c=a.left+a.width),l<a.top?l=a.top:l>a.top+a.height&&(l=a.top+a.height),c-=a.left,l-=a.top}else n&&(c=n.x*a.width,l=n.y*a.height);"h"!==r&&(i.style.left="calc(".concat(c/a.width*100,"% - ").concat(i.offsetWidth/2,"px)")),"v"!==r&&(i.style.top="calc(".concat(l/a.height*100,"% - ").concat(i.offsetHeight/2,"px)")),e.cache={x:c/a.width,y:l/a.height};const p=E(c/a.width),u=E(l/a.height);switch(r){case"v":return o.onchange(p);case"h":return o.onchange(u);default:return o.onchange(p,u)}},_tapstop(){e.options.onstop(),l(document,["mouseup","touchend","touchcancel"],e._tapstop),l(document,["mousemove","touchmove"],e._tapmove)},trigger(){e._tapmove()},update(t=0,o=0){const{left:n,top:r,width:i,height:s}=e.options.wrapper.getBoundingClientRect();"h"===e.options.lock&&(o=t),e._tapmove({clientX:n+i*t,clientY:r+s*o})},destroy(){const{options:t,_tapstart:o,_keyboard:n}=e;l(document,["keydown","keyup"],n),l([t.wrapper,t.element],"mousedown",o),l([t.wrapper,t.element],"touchstart",o,{passive:!1})}},{options:o,_tapstart:n,_keyboard:r}=e;return c([o.wrapper,o.element],"mousedown",n),c([o.wrapper,o.element],"touchstart",n,{passive:!1}),c(document,["keydown","keyup"],r),e}function R(t={}){t=Object.assign({onchange:()=>0,className:"",elements:[]},t);const e=c(t.elements,"click",e=>{t.elements.forEach(o=>o.classList[e.target===o?"add":"remove"](t.className)),t.onchange(e)});return{destroy:()=>l(...e)}}function L({el:t,reference:e,padding:o=8}){const n={start:"sme",middle:"mse",end:"ems"},r={top:"tbrl",right:"rltb",bottom:"btrl",left:"lrbt"},i=((t={})=>(e,o=t[e])=>{if(o)return o;const[n,r="middle"]=e.split("-"),i="top"===n||"bottom"===n;return t[e]={position:n,variant:r,isVertical:i}})();return{update(s,a=!1){const{position:c,variant:l,isVertical:p}=i(s),u=e.getBoundingClientRect(),h=t.getBoundingClientRect(),d=t=>t?{t:u.top-h.height-o,b:u.bottom+o}:{r:u.right+o,l:u.left-h.width-o},f=t=>t?{s:u.left+u.width-h.width,m:-h.width/2+(u.left+u.width/2),e:u.left}:{s:u.bottom-h.height,m:u.bottom-u.height/2-h.height/2,e:u.bottom-u.height},g={},m=(t,e,o)=>{const n="top"===o,r=n?h.height:h.width,i=window[n?"innerHeight":"innerWidth"];for(const n of t){const t=e[n],s=g[o]="".concat(t,"px");if(t>0&&t+r<i)return s}return null};for(const e of[p,!p]){const o=e?"top":"left",i=e?"left":"top",s=m(r[c],d(e),o),a=m(n[l],f(e),i);if(s&&a)return t.style[i]=a,void(t.style[o]=s)}a?(t.style.top="".concat((window.innerHeight-h.height)/2,"px"),t.style.left="".concat((window.innerWidth-h.width)/2,"px")):(t.style.left=g.left,t.style.top=g.top)}}}function x(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class P{constructor(t){x(this,"_initializingActive",!0),x(this,"_recalc",!0),x(this,"_nanopop",null),x(this,"_root",null),x(this,"_color",A()),x(this,"_lastColor",A()),x(this,"_swatchColors",[]),x(this,"_eventListener",{init:[],save:[],hide:[],show:[],clear:[],change:[],changestop:[],cancel:[],swatchselect:[]}),this.options=t=Object.assign({appClass:null,theme:"classic",useAsButton:!1,padding:8,disabled:!1,comparison:!0,closeOnScroll:!1,outputPrecision:0,lockOpacity:!1,autoReposition:!0,container:"body",components:{interaction:{}},i18n:{},swatches:null,inline:!1,sliders:null,default:"#42445a",defaultRepresentation:null,position:"bottom-middle",adjustableNumbers:!0,showAlways:!1,closeWithKey:"Escape"},t);const{swatches:e,components:o,theme:n,sliders:r,lockOpacity:i,padding:s}=t;["nano","monolith"].includes(n)&&!r&&(t.sliders="h"),o.interaction||(o.interaction={});const{preview:a,opacity:c,hue:l,palette:p}=o;o.opacity=!i&&c,o.palette=p||a||c||l,this._preBuild(),this._buildComponents(),this._bindEvents(),this._finalBuild(),e&&e.length&&e.forEach(t=>this.addSwatch(t));const{button:u,app:h}=this._root;this._nanopop=L({reference:u,padding:s,el:h}),u.setAttribute("role","button"),u.setAttribute("aria-label",this._t("btn:toggle"));const d=this;requestAnimationFrame((function e(){if(!h.offsetWidth&&h.parentElement!==t.container)return requestAnimationFrame(e);d.setColor(t.default),d._rePositioningPicker(),t.defaultRepresentation&&(d._representation=t.defaultRepresentation,d.setColorRepresentation(d._representation)),t.showAlways&&d.show(),d._initializingActive=!1,d._emit("init")}))}_preBuild(){const{options:t}=this;for(const e of["el","container"])t[e]=d(t[e]);this._root=(t=>{const{components:e,useAsButton:o,inline:n,appClass:r,theme:i,lockOpacity:s}=t.options,a=t=>t?"":'style="display:none" hidden',c=e=>t._t(e),l=u('\n      <div :ref="root" class="pickr">\n\n        '.concat(o?"":'<button type="button" :ref="button" class="pcr-button"></button>','\n\n        <div :ref="app" class="pcr-app ').concat(r||"",'" data-theme="').concat(i,'" ').concat(n?'style="position: unset"':"",' aria-label="').concat(c("ui:dialog"),'" role="window">\n          <div class="pcr-selection" ').concat(a(e.palette),'>\n            <div :obj="preview" class="pcr-color-preview" ').concat(a(e.preview),'>\n              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="').concat(c("btn:last-color"),'"></button>\n              <div :ref="currentColor" class="pcr-current-color"></div>\n            </div>\n\n            <div :obj="palette" class="pcr-color-palette">\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="').concat(c("aria:palette"),'" role="listbox"></div>\n            </div>\n\n            <div :obj="hue" class="pcr-color-chooser" ').concat(a(e.hue),'>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="').concat(c("aria:hue"),'" role="slider"></div>\n            </div>\n\n            <div :obj="opacity" class="pcr-color-opacity" ').concat(a(e.opacity),'>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="').concat(c("aria:opacity"),'" role="slider"></div>\n            </div>\n          </div>\n\n          <div class="pcr-swatches ').concat(e.palette?"":"pcr-last",'" :ref="swatches"></div>\n\n          <div :obj="interaction" class="pcr-interaction" ').concat(a(Object.keys(e.interaction).length),'>\n            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ').concat(a(e.interaction.input),' aria-label="').concat(c("aria:input"),'">\n\n            <input :arr="options" class="pcr-type" data-type="HEXA" value="').concat(s?"HEX":"HEXA",'" type="button" ').concat(a(e.interaction.hex),'>\n            <input :arr="options" class="pcr-type" data-type="RGBA" value="').concat(s?"RGB":"RGBA",'" type="button" ').concat(a(e.interaction.rgba),'>\n            <input :arr="options" class="pcr-type" data-type="HSLA" value="').concat(s?"HSL":"HSLA",'" type="button" ').concat(a(e.interaction.hsla),'>\n            <input :arr="options" class="pcr-type" data-type="HSVA" value="').concat(s?"HSV":"HSVA",'" type="button" ').concat(a(e.interaction.hsva),'>\n            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ').concat(a(e.interaction.cmyk),'>\n\n            <input :ref="save" class="pcr-save" value="').concat(c("btn:save"),'" type="button" ').concat(a(e.interaction.save),' aria-label="').concat(c("aria:btn:save"),'">\n            <input :ref="cancel" class="pcr-cancel" value="').concat(c("btn:cancel"),'" type="button" ').concat(a(e.interaction.cancel),' aria-label="').concat(c("aria:btn:cancel"),'">\n            <input :ref="clear" class="pcr-clear" value="').concat(c("btn:clear"),'" type="button" ').concat(a(e.interaction.clear),' aria-label="').concat(c("aria:btn:clear"),'">\n          </div>\n        </div>\n      </div>\n    ')),p=l.interaction;return p.options.find(t=>!t.hidden&&!t.classList.add("active")),p.type=()=>p.options.find(t=>t.classList.contains("active")),l})(this),t.useAsButton&&(this._root.button=t.el),t.container.appendChild(this._root.root)}_finalBuild(){const t=this.options,e=this._root;if(t.container.removeChild(e.root),t.inline){const o=t.el.parentElement;t.el.nextSibling?o.insertBefore(e.app,t.el.nextSibling):o.appendChild(e.app)}else t.container.appendChild(e.app);t.useAsButton?t.inline&&t.el.remove():t.el.parentNode.replaceChild(e.root,t.el),t.disabled&&this.disable(),t.comparison||(e.button.style.transition="none",t.useAsButton||(e.preview.lastColor.style.transition="none")),this.hide()}_buildComponents(){const t=this,e=this.options.components,o=(t.options.sliders||"v").repeat(2),[n,r]=o.match(/^[vh]+$/g)?o:[],i=()=>this._color||(this._color=this._lastColor.clone()),s={palette:j({element:t._root.palette.picker,wrapper:t._root.palette.palette,onstop:()=>t._emit("changestop",t),onchange(o,n){if(!e.palette)return;const r=i(),{_root:s,options:a}=t,{lastColor:c,currentColor:l}=s.preview;t._recalc&&(r.s=100*o,r.v=100-100*n,r.v<0&&(r.v=0),t._updateOutput());const p=r.toRGBA().toString(0);this.element.style.background=p,this.wrapper.style.background="\n                        linear-gradient(to top, rgba(0, 0, 0, ".concat(r.a,"), transparent),\n                        linear-gradient(to left, hsla(").concat(r.h,", 100%, 50%, ").concat(r.a,"), rgba(255, 255, 255, ").concat(r.a,"))\n                    "),a.comparison?a.useAsButton||t._lastColor||(c.style.color=p):(s.button.style.color=p,s.button.classList.remove("clear"));const u=r.toHEXA().toString();for(const{el:e,color:o}of t._swatchColors)e.classList[u===o.toHEXA().toString()?"add":"remove"]("pcr-active");l.style.color=p}}),hue:j({lock:"v"===r?"h":"v",element:t._root.hue.picker,wrapper:t._root.hue.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.hue||!e.palette)return;const n=i();t._recalc&&(n.h=360*o),this.element.style.backgroundColor="hsl(".concat(n.h,", 100%, 50%)"),s.palette.trigger()}}),opacity:j({lock:"v"===n?"h":"v",element:t._root.opacity.picker,wrapper:t._root.opacity.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.opacity||!e.palette)return;const n=i();t._recalc&&(n.a=Math.round(100*o)/100),this.element.style.background="rgba(0, 0, 0, ".concat(n.a,")"),s.palette.trigger()}}),selectable:R({elements:t._root.interaction.options,className:"active",onchange(e){t._representation=e.target.getAttribute("data-type").toUpperCase(),t._recalc&&t._updateOutput()}})};this._components=s}_bindEvents(){const{_root:t,options:e}=this,o=[c(t.interaction.clear,"click",()=>this._clearColor()),c([t.interaction.cancel,t.preview.lastColor],"click",()=>{this._emit("cancel",this),this.setHSVA(...(this._lastColor||this._color).toHSVA(),!0)}),c(t.interaction.save,"click",()=>{!this.applyColor()&&!e.showAlways&&this.hide()}),c(t.interaction.result,["keyup","input"],t=>{this.setColor(t.target.value,!0)&&!this._initializingActive&&this._emit("change",this._color),t.stopImmediatePropagation()}),c(t.interaction.result,["focus","blur"],t=>{this._recalc="blur"===t.type,this._recalc&&this._updateOutput()}),c([t.palette.palette,t.palette.picker,t.hue.slider,t.hue.picker,t.opacity.slider,t.opacity.picker],["mousedown","touchstart"],()=>this._recalc=!0)];if(!e.showAlways){const n=e.closeWithKey;o.push(c(t.button,"click",()=>this.isOpen()?this.hide():this.show()),c(document,"keyup",t=>this.isOpen()&&(t.key===n||t.code===n)&&this.hide()),c(document,["touchstart","mousedown"],e=>{this.isOpen()&&!h(e).some(e=>e===t.app||e===t.button)&&this.hide()},{capture:!0}))}if(e.adjustableNumbers){const e={rgba:[255,255,255,1],hsva:[360,100,100,1],hsla:[360,100,100,1],cmyk:[100,100,100,100]};f(t.interaction.result,(t,o,n)=>{const r=e[this.getColorRepresentation().toLowerCase()];if(r){const e=r[n],i=t+(e>=100?1e3*o:o);return i<=0?0:Number((i<e?i:e).toPrecision(3))}return t})}if(e.autoReposition&&!e.inline){let t=null;const n=this;o.push(c(window,["scroll","resize"],()=>{n.isOpen()&&(e.closeOnScroll&&n.hide(),null===t?(t=setTimeout(()=>t=null,100),requestAnimationFrame((function e(){n._rePositioningPicker(),null!==t&&requestAnimationFrame(e)}))):(clearTimeout(t),t=setTimeout(()=>t=null,100)))},{capture:!0}))}this._eventBindings=o}_rePositioningPicker(){const{options:t}=this;t.inline||this._nanopop.update(t.position,!this._recalc)}_updateOutput(){const{_root:t,_color:e,options:o}=this;if(t.interaction.type()){const n="to".concat(t.interaction.type().getAttribute("data-type"));t.interaction.result.value="function"==typeof e[n]?e[n]().toString(o.outputPrecision):""}!this._initializingActive&&this._recalc&&this._emit("change",e)}_clearColor(t=!1){const{_root:e,options:o}=this;o.useAsButton||(e.button.style.color="rgba(0, 0, 0, 0.15)"),e.button.classList.add("clear"),o.showAlways||this.hide(),this._lastColor=null,this._initializingActive||t||(this._emit("save",null),this._emit("clear",this))}_parseLocalColor(t){const{values:e,type:o,a:n}=function(t){t=t.match(/^[a-zA-Z]+$/)?function(t){if("black"===t.toLowerCase())return"#000";const e=document.createElement("canvas").getContext("2d");return e.fillStyle=t,"#000"===e.fillStyle?null:e.fillStyle}(t):t;const e={cmyk:/^cmyk[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)/i,rgba:/^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hsla:/^((hsla)|hsl)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hsva:/^((hsva)|hsv)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i,hexa:/^#?(([\dA-Fa-f]{3,4})|([\dA-Fa-f]{6})|([\dA-Fa-f]{8}))$/i},o=t=>t.map(t=>/^(|\d+)\.\d+|\d+$/.test(t)?Number(t):void 0);let n;t:for(const r in e){if(!(n=e[r].exec(t)))continue;const i=t=>!!n[2]==("number"==typeof t);switch(r){case"cmyk":{const[,t,e,i,s]=o(n);if(t>100||e>100||i>100||s>100)break t;return{values:O(t,e,i,s),type:r}}case"rgba":{const[,,,t,e,s,a]=o(n);if(t>255||e>255||s>255||a<0||a>1||!i(a))break t;return{values:[...k(t,e,s),a],a:a,type:r}}case"hexa":{let[,t]=n;4!==t.length&&3!==t.length||(t=t.split("").map(t=>t+t).join(""));const e=t.substring(0,6);let o=t.substring(6);return o=o?parseInt(o,16)/255:void 0,{values:[...C(e),o],a:o,type:r}}case"hsla":{const[,,,t,e,s,a]=o(n);if(t>360||e>100||s>100||a<0||a>1||!i(a))break t;return{values:[...S(t,e,s),a],a:a,type:r}}case"hsva":{const[,,,t,e,s,a]=o(n);if(t>360||e>100||s>100||a<0||a>1||!i(a))break t;return{values:[t,e,s,a],a:a,type:r}}}}return{values:null,type:null}}(t),{lockOpacity:r}=this.options,i=void 0!==n&&1!==n;return e&&3===e.length&&(e[3]=void 0),{values:!e||r&&i?null:e,type:o}}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this))}_t(t){return this.options.i18n[t]||P.I18N_DEFAULTS[t]}on(t,e){return"function"==typeof e&&"string"==typeof t&&t in this._eventListener&&this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t];if(o){const t=o.indexOf(e);~t&&o.splice(t,1)}return this}addSwatch(t){const{values:e}=this._parseLocalColor(t);if(e){const{_swatchColors:t,_root:o}=this,n=A(...e),r=p('<button type="button" style="color: '.concat(n.toRGBA().toString(0),'" aria-label="').concat(this._t("btn:swatch"),'"/>'));return o.swatches.appendChild(r),t.push({el:r,color:n}),this._eventBindings.push(c(r,"click",()=>{this.setHSVA(...n.toHSVA(),!0),this._emit("swatchselect",n),this._emit("change",n)})),!0}return!1}removeSwatch(t){const e=this._swatchColors[t];if(e){const{el:o}=e;return this._root.swatches.removeChild(o),this._swatchColors.splice(t,1),!0}return!1}applyColor(t=!1){const{preview:e,button:o}=this._root,n=this._color.toRGBA().toString(0);return e.lastColor.style.color=n,this.options.useAsButton||(o.style.color=n),o.classList.remove("clear"),this._lastColor=this._color.clone(),this._initializingActive||t||this._emit("save",this._color),this}destroy(){this._eventBindings.forEach(t=>l(...t)),Object.keys(this._components).forEach(t=>this._components[t].destroy())}destroyAndRemove(){this.destroy();const{root:t,app:e}=this._root;t.parentElement&&t.parentElement.removeChild(t),e.parentElement.removeChild(e),Object.keys(this).forEach(t=>this[t]=null)}hide(){return this._root.app.classList.remove("visible"),this._emit("hide",this),this}show(){return this.options.disabled||(this._root.app.classList.add("visible"),this._rePositioningPicker(),this._emit("show",this)),this}isOpen(){return this._root.app.classList.contains("visible")}setHSVA(t=360,e=0,o=0,n=1,r=!1){const i=this._recalc;if(this._recalc=!1,t<0||t>360||e<0||e>100||o<0||o>100||n<0||n>1)return!1;this._color=A(t,e,o,n);const{hue:s,opacity:a,palette:c}=this._components;return s.update(t/360),a.update(n),c.update(e/100,1-o/100),r||this.applyColor(),i&&this._updateOutput(),this._recalc=i,!0}setColor(t,e=!1){if(null===t)return this._clearColor(e),!0;const{values:o,type:n}=this._parseLocalColor(t);if(o){const t=n.toUpperCase(),{options:r}=this._root.interaction,i=r.find(e=>e.getAttribute("data-type")===t);if(i&&!i.hidden)for(const t of r)t.classList[t===i?"add":"remove"]("active");return!!this.setHSVA(...o,e)&&this.setColorRepresentation(t)}return!1}setColorRepresentation(t){return t=t.toUpperCase(),!!this._root.interaction.options.find(e=>e.getAttribute("data-type").startsWith(t)&&!e.click())}getColorRepresentation(){return this._representation}getColor(){return this._color}getSelectedColor(){return this._lastColor}getRoot(){return this._root}disable(){return this.hide(),this.options.disabled=!0,this._root.button.classList.add("disabled"),this}enable(){return this.options.disabled=!1,this._root.button.classList.remove("disabled"),this}}x(P,"utils",n),x(P,"libs",{HSVaColor:A,Moveable:j,Nanopop:L,Selectable:R}),x(P,"version",g.a),x(P,"I18N_DEFAULTS",{"ui:dialog":"color picker dialog","btn:toggle":"toggle color picker dialog","btn:swatch":"color swatch","btn:last-color":"use previous color","btn:save":"Save","btn:cancel":"Cancel","btn:clear":"Clear","aria:btn:save":"save and close","aria:btn:cancel":"cancel and close","aria:btn:clear":"clear and close","aria:input":"color input field","aria:palette":"color selection area","aria:hue":"hue selection slider","aria:opacity":"selection slider"}),x(P,"create",t=>new P(t)),e.default=P}]).default},function(t,e,o){"use strict";o.r(e);var n=o(1),r=o.n(n),i=o(0),s=o.n(i);var a=(t,e)=>{let o;const n=function(...n){clearTimeout(o),o=setTimeout(()=>t.apply(this,n),e)};return n.cancel=()=>{o&&clearTimeout(o)},n},c=(o(6),o(2)),l=o.n(c),p=()=>c.utils.createFromTemplate(`\n<div class="gpickr" :ref="root">\n\n    <div :ref="pickr"></div>\n    <div :obj="gradient" class="gpcr-interaction">\n    <div :ref="result" class="gpcr-result">\n        \n         <div :ref="mode" data-mode="linear" class="gpcr-mode"></div>\n\n            <div :ref="angle" class="gpcr-angle">\n                <div :ref="arrow"></div>\n            </div>\n\n            <div :ref="pos" class="gpcr-pos">\n                ${["tl","tm","tr","l","m","r","bl","bm","br"].map(t=>`<div data-pos="${t}"></div>`).join("")}\n            </div>\n        </div>\n\n        <div :obj="stops" class="gpcr-stops">\n            <div :ref="preview" class="gpcr-stop-preview"></div>\n            <div :ref="markers" class="gpcr-stop-marker"></div>\n        </div>\n       \n    </div>\n\n</div>\n`),u=t=>{const e=t.touches&&t.touches[0]||t;return{tap:e,x:e.clientX,y:e.clientY,target:e.target}};let h=document.createElement("p");function*d(t,e,o=-1){for(let n;n=e.exec(t);)yield~o?n[o].trim():n.map(t=>t.trim())}function f(t,e,o=-1){const n=t.match(e);return n?~o?n[o]:n:null}function g(t){const e="rgba(0, 0, 0, 0)";if(h.style.color=e,t===e)return t;h.style.color=t;const o=getComputedStyle(h).color;return o===e?null:o}function m(t){if(!(t=function(t){return h.style.backgroundImage=t,getComputedStyle(h).backgroundImage}(t)))return null;const[,e,o]=t.match(/^(\w+)-gradient\((.*)\)$/i)||[];if(!e||!o)return null;const n=[...d(o,/(rgba?\(.*?\)|#?\w+)(.*?)(?=,|$)/gi)],r=[];let i=null,s=null;for(let t=0;t<n.length;t++){const[e,o,a]=n[t],c=g(o),l=a.split(/\s+/g).map(t=>f(t,/^-?(\d*(\.\d+)?)%$/,1)).filter(Boolean).map(Number);if(!l.length&&c)r.push({loc:null,color:c});else if(l.length)for(const t of l)r.push({loc:t,color:c||s});else i||(i=e);s=c||s}r[r.length-1].loc||(r[r.length-1].loc=100);for(let t=0;t<r.length;t++){const e=r[t];if(!e.loc)if(t){let o=2,n=t+1;for(;n<r.length&&!r[n].loc;n++)o++;e.loc=r[t-1].loc+(r[n].loc-r[t-1].loc)/o}else e.loc=0}return{str:t,type:e,modifier:i,stops:r}}var b=t=>{document.body.appendChild(h);const e=m(t);return document.body.removeChild(h),e},_={angleToDegrees(t){const e=t.trim().toLowerCase().match(/^(-?\d*(\.\d+)?)(deg|rad|grad|turn)$/i);if(!e)return null;const o=Number(e[1]);switch(e[3]){case"deg":return o;case"rad":return 180/Math.PI*o;case"grad":return o/400*360;case"turn":return 360*o}return null}};function v(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}const y="focused-stop",{utils:w}=l.a,{on:k,off:O}=w,S=t=>{const e=Object.assign({cmyk:!1,hex:!1,hsla:!1,hsva:!1,rgba:!0,cancel:!1,clear:!1,save:!1,input:!0,swatches:[],theme:"classic",preview:!0,opacity:!0,hue:!0,palette:!0},t.pickr);return delete t.pickr,t.angle||(t.angle=180),t.mode||(t.mode="linear"),t.stops||(t.stops=[["#ffffff",0],["#000000",1]]),Object.assign({conic:!0,linear:!0,radial:!0,lockOpacity:!1,pickr:e},t)};class C{constructor(t){v(this,"_stops",[]),v(this,"_angle",0),v(this,"_angles",[{angle:0,name:"to top"},{angle:90,name:"to right"},{angle:180,name:"to bottom"},{angle:270,name:"to left"},{angle:"to top right",name:"to top right"},{angle:"to top right",name:"to right top"},{angle:"to bottom right",name:"to right bottom"},{angle:"to bottom right",name:"to bottom right"},{angle:"to bottom left",name:"to left bottom"},{angle:"to bottom left",name:"to bottom left"},{angle:"to top left",name:"to top left"},{angle:"to top left",name:"to left top"}]),v(this,"_direction","circle at center"),v(this,"_directions",[{pos:"tl",css:"circle at left top"},{pos:"tm",css:"circle at center top"},{pos:"tr",css:"circle at right top"},{pos:"r",css:"circle at right"},{pos:"m",css:"circle at center"},{pos:"l",css:"circle at left"},{pos:"br",css:"circle at right bottom"},{pos:"bm",css:"circle at center bottom"},{pos:"bl",css:"circle at left bottom"}]),v(this,"_focusedStop",null),v(this,"_lockRepresentation",!1),v(this,"_mode","linear"),v(this,"_modes",[]),v(this,"_representation","HEXA"),v(this,"_root",null),v(this,"_eventListener",{init:[],change:[],colorChange:[]}),t=S(t),this._root=p(t),t.angle&&(this._angle=t.angle),t.radial&&this._modes.push("radial"),t.conic&&CSS.supports("background-image","conic-gradient(#fff, #fff)")&&this._modes.push("conic"),(t.linear||0===this._modes.length)&&this._modes.push("linear"),t.mode&&-1!==this._modes.indexOf(t.mode)&&(this._mode=t.mode),t.el=t.el.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document),t.el.parentElement.replaceChild(this._root.root,t.el),this._pickr=l.a.create({el:this._root.pickr,theme:t.pickr.theme,inline:!0,useAsButton:!0,showAlways:!0,defaultRepresentation:"HEXA",swatches:t.pickr.swatches,lockOpacity:t.pickr.lockOpacity,components:{palette:t.pickr.palette,preview:t.pickr.preview,opacity:t.pickr.opacity,hue:t.pickr.hue,interaction:{input:t.pickr.input,hex:t.pickr.hex,rgba:t.pickr.rgba,cmyk:t.pickr.cmyk,hsla:t.pickr.hsla,hsva:t.pickr.hsva,cancel:t.pickr.cancel,clear:t.pickr.clear,save:t.pickr.save}}}).on("change",t=>{this._focusedStop&&(this._focusedStop.color=t.toRGBA().toString(0),this._render()),this._lockRepresentation||(this._representation=this._pickr.getColorRepresentation())}).on("init",()=>{for(const[e,o]of t.stops)this.addStop(e,o,!0);this._representation=this._pickr.getColorRepresentation(),this._bindEvents(),this._emit("init",this)})}_bindEvents(){const{gradient:t}=this._root;k(t.mode,["mousedown","touchstart"],t=>{const e=this._modes.indexOf(this._mode)+1;this._mode=this._modes[e===this._modes.length?0:e],this._render(),t.stopPropagation()}),k(t.stops.preview,"click",t=>{this.addStop(this._pickr.getColor().toRGBA().toString(),this._resolveColorStopPosition(t.pageX))}),k(t.result,["mousedown","touchstart"],e=>{if(e.preventDefault(),"linear"!==this._mode)return;t.angle.classList.add("gpcr-active");const o=k(window,["mousemove","touchmove"],e=>{const{x:o,y:n}=u(e),r=t.angle.getBoundingClientRect(),i=r.left+r.width/2,s=r.top+r.height/2,a=Math.atan2(o-i,n-s)-Math.PI,c=Math.abs(180*a/Math.PI),l=[1,2,4][Number(e.shiftKey||2*e.ctrlKey)];this.setLinearAngle(c-c%(45/l))}),n=k(window,["mouseup","touchend","touchcancel"],()=>{t.angle.classList.remove("gpcr-active"),O(...o),O(...n)})}),k(t.pos,["mousedown","touchstart"],t=>{const e=t.target.getAttribute("data-pos"),o=this._directions.find(t=>t.pos===e);this.setRadialPosition(o&&o.css||this._direction)})}_getAngleFromString(t){t=t.toLowerCase();const e=this._angles.find(e=>e.name===t);return e?e.angle:void 0}_render(t=!1){const{stops:{preview:e},result:o,arrow:n,angle:r,pos:i,mode:s}=this._root.gradient,{_stops:a,_mode:c,_angle:l}=this;a.sort((t,e)=>t.loc-e.loc);for(const{color:t,el:e,loc:o}of a)Object.assign(e.style,{left:`${100*o}%`,color:t});const p="number"==typeof l?l:this._getAngleFromString(l)||0;n.style.transform=`rotate(${p-90}deg)`,e.style.background=`linear-gradient(to right, ${this.getStops().toString("linear")})`,o.style.background=this.getGradient().toString(),i.style.opacity="radial"===c?"":"0",i.style.visibility="radial"===c?"":"hidden",r.style.opacity="linear"===c?"":"0",r.style.visibility="linear"===c?"":"hidden",s.setAttribute("data-mode",c),!t&&this._emit("change",this)}_resolveColorStopPosition(t){const{markers:e}=this._root.gradient.stops,o=e.getBoundingClientRect();let n=(t-o.left)/o.width;return n<0&&(n=0),n>1&&(n=1),n}_setPickrColor(t){this._lockRepresentation=!0,this._pickr.setColor(t),this._lockRepresentation=!1,this._pickr.setColorRepresentation(this._representation)}addStop(t,e=.5,o=!1){const{markers:n}=this._root.gradient.stops,r=w.createElementFromString('<div class="gpcr-marker"></div>');n.appendChild(r);const i={el:r,loc:e,color:t,listener:k(r,["mousedown","touchstart"],t=>{t.preventDefault();const e=n.getBoundingClientRect();this.setFocusedStop(i),this._setPickrColor(i.color);let o=!1;const s=k(window,["mousemove","touchmove"],t=>{const{x:n,y:s}=u(t),a=Math.abs(s-e.y);o=a>50&&this._stops.length>2,r.style.opacity=o?"0":"1",o||(i.loc=this._resolveColorStopPosition(n),this._render())}),a=k(window,["mouseup","touchend","touchcancel"],()=>{O(...s),O(...a),o&&(this.removeStop(i),this._render(!0))})})};return this.setFocusedStop(i),this._stops.push(i),this._setPickrColor(t),t=this._pickr.getColor().toRGBA().toString(0),this._render(o),this}setFocusedStop(t){this._stops.forEach(t=>{t.el.classList.contains(y)&&t.el.classList.remove(y)}),t.el.classList.add(y),this._focusedStop=t}removeStop(t){const{_stops:e}=this,o=(()=>"number"==typeof t?e.find(t=>t.loc===t):"string"==typeof t?e.find(t=>t.color===t):"object"==typeof t?t:void 0)();e.splice(e.indexOf(o),1),o.el.remove(),O(...o.listener),this._focusedStop===o&&this.setFocusedStop(e[0]),this._render()}clearStops(){this._stops.forEach(t=>this.removeStop(t))}replaceStops(t){if(t){this.clearStops();for(const[e,o]of t)this.addStop(e,o,!0)}}setGradient(t){const e=b(t);if(!e||e.stops.length<2)return!1;const{type:o,stops:n,modifier:r}=e,i=[...this._stops];if(this._modes.includes(o)){this._mode=o;for(const t of n)this.addStop(t.color,t.loc/100);for(const t of i)this.removeStop(t);return"linear"===o?this.setLinearAngle(null!==r?r:180):"radial"===o&&(this._direction="circle at center",r&&this.setRadialPosition(r)),!0}return!1}getGradient(t=this._mode){const e=this.getStops().toString(t);switch(t){case"linear":if("number"==typeof this._angle)return`linear-gradient(${this._angle}deg, ${e})`;if("string"==typeof this._angle)return`linear-gradient(${this._angle}, ${e})`;break;case"radial":return`radial-gradient(${this._direction}, ${e})`;case"conic":return`conic-gradient(${e})`}}getStops(){const t=this._stops.map(t=>({color:t.color,location:t.loc})),e=this._mode;return t.toString=function(t=e){switch(t){case"linear":case"radial":return this.map(t=>`${t.color} ${(100*t.location).toFixed(1)}%`).join(",");case"conic":return this.map(t=>`${t.color} ${(360*t.location).toFixed(1)}deg`).join(",")}},t}getLinearAngle(){return"linear"===this._mode?this._angle:-1}setLinearAngle(t){if("number"!=typeof t){const e=_.angleToDegrees(t);t=null!==e?e:this._getAngleFromString(t)}return("number"==typeof t||"string"==typeof t)&&(this._angle=t,this._render(),!0)}setRadialPosition(t){const e=this._directions.find(e=>e.css===t);if(!e)return!1;this._direction=e.css;for(const t of Array.from(this._root.gradient.pos.children))t.classList[t.getAttribute("data-pos")===e.pos?"add":"remove"]("gpcr-active");return this._render(),!0}getRadialPosition(){return"radial"===this._mode?this._direction:null}setMode(t){this._mode=t,this._render()}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this))}on(t,e){return"function"==typeof e&&"string"==typeof t&&t in this._eventListener&&this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t];if(o){const t=o.indexOf(e);~t&&o.splice(t,1)}return this}}C.Pickr=l.a;var A=C;o.d(e,"default",(function(){return R})),o.d(e,"LINEAR_DIRECTION",(function(){return E})),o.d(e,"MODE",(function(){return j}));const E={TO_TOP:"to top",TO_RIGHT:"to right",TO_BOTTOM:"to bottom",TO_LEFT:"to left",TO_TOP_RIGHT:"to top right",TO_TOP_LEFT:"to top left",TO_BOTTOM_RIGHT:"to bottom right",TO_BOTTOM_LEFT:"to bottom left"},j={CONIC:"conic",LINEAR:"linear",RADIAL:"radial"},R=({angle:t,cssString:e,debounceMS:o,getGpickrRef:i,mode:s,modes:c,onChange:l,pickr:p,setAngle:u,setMode:h,stops:d})=>{const[f,g]=Object(n.useState)(),[m,b]=Object(n.useState)(!1),_=Object(n.useRef)(null);return Object(n.useEffect)(()=>{c=c?{radial:!1,linear:!1,conic:!1,...c}:{}},[]),Object(n.useEffect)(()=>{_&&g(new A({el:".gpickr",angle:t,mode:s,stops:d,...c,pickr:{...p}}).on("init",()=>{b(!0)}))},[_]),Object(n.useEffect)(()=>{if(f){const e=e=>{u&&e._angle!==t&&u(e._angle),h&&e._mode!==s&&h(e._mode),l&&l(e)},n=void 0!==o?a(e,o):e;return f.on("change",n),()=>f.off("change",n)}},[t,f,s]),Object(n.useEffect)(()=>{f&&i&&i(f)},[f]),Object(n.useEffect)(()=>{f&&m&&e&&e!==f.getGradient()&&f.setGradient(e)},[f,e,m]),Object(n.useEffect)(()=>{f&&m&&void 0!==t&&f._angle!==t&&f.setLinearAngle(t)},[f,m,t]),Object(n.useEffect)(()=>{f&&m&&void 0!==s&&f._mode!==s&&f.setMode(s)},[f,m,s]),r.a.createElement("div",{className:"gpickr",ref:_})};R.propTypes={angle:s.a.oneOfType([s.a.string,s.a.number]),cssString:s.a.string,debounceMS:s.a.number,getGpickrRef:s.a.func,onChange:s.a.func,mode:s.a.string,modes:s.a.shape({conic:s.a.bool,linear:s.a.bool,radial:s.a.bool}),setAngle:s.a.func,setMode:s.a.func,stops:s.a.arrayOf(s.a.arrayOf(s.a.oneOfType([s.a.string,s.a.number]))),pickr:s.a.shape({theme:s.a.string,swatches:s.a.arrayOf(s.a.string),lockOpacity:s.a.bool,palette:s.a.bool,preview:s.a.bool,opacity:s.a.bool,hue:s.a.bool,input:s.a.bool,hex:s.a.bool,rgba:s.a.bool,cmyk:s.a.bool,hsla:s.a.bool,hsva:s.a.bool,cancel:s.a.bool,clear:s.a.bool,save:s.a.bool})},R.defaultProps={pickr:{theme:"nano"}}},function(t,e,o){"use strict";var n=o(5);function r(){}function i(){}i.resetWarningCache=r,t.exports=function(){function t(t,e,o,r,i,s){if(s!==n){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var o={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:i,resetWarningCache:r};return o.PropTypes=o,o}},function(t,e,o){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,o){},function(t,o){t.exports=e},function(t,e,o){"use strict";o.r(e);var n=o(1),r=o.n(n),i=o(7),s=o.n(i),a=o(3);const c=(t,e)=>{console.log(t,e)},l=t=>{console.log(t)};let p=[["rgb(181, 32, 32)",.3],["rgba(64, 64, 191, 0.72)",.7],["#47d147",.9]];const u=()=>{const[t,e]=Object(n.useState)(p),[o,i]=Object(n.useState)(180),[s,u]=Object(n.useState)();return r.a.createElement("div",null,r.a.createElement("div",null,`Angle: ${o}`,r.a.createElement("div",null,r.a.createElement("button",{onClick:()=>i("to top right")},"Top Right")),r.a.createElement("div",null,r.a.createElement("button",{onClick:()=>i("to top left")},"Top Left"))),r.a.createElement("div",null,`Mode: ${s}`,r.a.createElement("div",null,r.a.createElement("button",{onClick:()=>u("linear")},"Linear")),r.a.createElement("div",null,r.a.createElement("button",{onClick:()=>u("radial")},"Radial"))),r.a.createElement(a.default,{onColorChange:c,onChange:l,stops:t,angle:o,setAngle:i,mode:s,setMode:u}))};s.a.render(r.a.createElement(u,null),document.getElementById("rGpicker"))}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,